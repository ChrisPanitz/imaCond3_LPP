{
    "type": [
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        2,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        3,
        0,
        1,
        0,
        1,
        3,
        3,
        3,
        3,
        0,
        1,
        0,
        1,
        3,
        3,
        0,
        1,
        0,
        1,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        0,
        1,
        0,
        1,
        3,
        3,
        0,
        1,
        0,
        1,
        3,
        3,
        0,
        1,
        0,
        1,
        3,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        3,
        3,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        2,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        2,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        2,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        2,
        2,
        2,
        2,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        3,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        3,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        3,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        3,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        3,
        3,
        2,
        3,
        2
    ],
    "data": [
        "+ ",
        "                                  y = dataArousal$Min_Mid[dataArousal$usGroup == \"ima\"],",
        "+ ",
        "                                  paired = TRUE)",
        "> ",
        "arousalImaNeuMinMid_BF <- ttestBF(x = dataArousal$Neu_Mid[dataArousal$usGroup == \"ima\"],",
        "+ ",
        "                                  y = dataArousal$Min_Mid[dataArousal$usGroup == \"ima\"],",
        "+ ",
        "                                  nullIntervall = NULL, paired = TRUE) # two-sided",
        "> ",
        "### Post",
        "> ",
        "# CS+av vs CS+neu",
        "> ",
        "arousalImaAvNeuPost_t <- t.test(x = dataArousal$Av_Post[dataArousal$usGroup == \"ima\"],",
        "+ ",
        "                                y = dataArousal$Neu_Post[dataArousal$usGroup == \"ima\"],",
        "+ ",
        "                                alternative = \"greater\", paired = TRUE) # one-sided",
        "> ",
        "arousalImaAvNeuPost_d <- cohens_d(x = dataArousal$Av_Post[dataArousal$usGroup == \"ima\"],",
        "+ ",
        "                                  y = dataArousal$Neu_Post[dataArousal$usGroup == \"ima\"],",
        "+ ",
        "                                  paired = TRUE)",
        "> ",
        "arousalImaAvNeuPost_BF <- ttestBF(x = dataArousal$Av_Post[dataArousal$usGroup == \"ima\"],",
        "+ ",
        "                                  y = dataArousal$Neu_Post[dataArousal$usGroup == \"ima\"],",
        "+ ",
        "                                  nullInterval = c(0, Inf), paired = TRUE) # one-sided x > y",
        "> ",
        "# CS+av vs CS-",
        "> ",
        "arousalImaAvMinPost_t <- t.test(x = dataArousal$Av_Post[dataArousal$usGroup == \"ima\"],",
        "+ ",
        "                                y = dataArousal$Min_Post[dataArousal$usGroup == \"ima\"],",
        "+ ",
        "                                alternative = \"greater\", paired = TRUE) # one-sided",
        "> ",
        "arousalImaAvMinPost_d <- cohens_d(x = dataArousal$Av_Post[dataArousal$usGroup == \"ima\"],",
        "+ ",
        "                                  y = dataArousal$Min_Post[dataArousal$usGroup == \"ima\"],",
        "+ ",
        "                                  paired = TRUE)",
        "> ",
        "arousalImaAvMinPost_BF <- ttestBF(x = dataArousal$Av_Post[dataArousal$usGroup == \"ima\"],",
        "+ ",
        "                                  y = dataArousal$Min_Post[dataArousal$usGroup == \"ima\"],",
        "+ ",
        "                                  nullInterval = c(0, Inf), paired = TRUE) # one-sided x > y",
        "> ",
        "# CS+neu vs CS-",
        "> ",
        "arousalImaNeuMinPost_t <- t.test(x = dataArousal$Neu_Post[dataArousal$usGroup == \"ima\"],",
        "+ ",
        "                                 y = dataArousal$Min_Post[dataArousal$usGroup == \"ima\"],",
        "+ ",
        "                                 alternative = \"two.sided\", paired = TRUE) # two-sided",
        "> ",
        "arousalImaNeuMinPost_d <- cohens_d(x = dataArousal$Neu_Post[dataArousal$usGroup == \"ima\"],",
        "+ ",
        "                                   y = dataArousal$Min_Post[dataArousal$usGroup == \"ima\"],",
        "+ ",
        "                                   paired = TRUE)",
        "> ",
        "arousalImaNeuMinPost_BF <- ttestBF(x = dataArousal$Neu_Post[dataArousal$usGroup == \"ima\"],",
        "+ ",
        "                                   y = dataArousal$Min_Post[dataArousal$usGroup == \"ima\"],",
        "+ ",
        "                                   nullIntervall = NULL, paired = TRUE) # two-sided",
        "> ",
        "tableArousalIma <- data.frame(",
        "+ ",
        "  time = c(rep(\"Pre\",3), rep(\"Mid\",3), rep(\"Post\",3)),",
        "+ ",
        "  comparison = rep(c(\"CS+av vs CS+neu\", \"CS+av vs CS-\", \"CSneu vs CS-\"), 3),",
        "+ ",
        "  t = c(arousalImaAvNeuPre_t$statistic, arousalImaAvMinPre_t$statistic, arousalImaNeuMinPre_t$statistic,",
        "+ ",
        "        arousalImaAvNeuMid_t$statistic, arousalImaAvMinMid_t$statistic, arousalImaNeuMinMid_t$statistic,",
        "+ ",
        "        arousalImaAvNeuPost_t$statistic, arousalImaAvMinPost_t$statistic, arousalImaNeuMinPost_t$statistic),",
        "+ ",
        "  df = c(arousalImaAvNeuPre_t$parameter, arousalImaAvMinPre_t$parameter, arousalImaNeuMinPre_t$parameter,",
        "+ ",
        "         arousalImaAvNeuMid_t$parameter, arousalImaAvMinMid_t$parameter, arousalImaNeuMinMid_t$parameter,",
        "+ ",
        "         arousalImaAvNeuPost_t$parameter, arousalImaAvMinPost_t$parameter, arousalImaNeuMinPost_t$parameter), ",
        "+ ",
        "  p = c(arousalImaAvNeuPre_t$p.value, arousalImaAvMinPre_t$p.value, arousalImaNeuMinPre_t$p.value,",
        "+ ",
        "        arousalImaAvNeuMid_t$p.value, arousalImaAvMinMid_t$p.value, arousalImaNeuMinMid_t$p.value,",
        "+ ",
        "        arousalImaAvNeuPost_t$p.value, arousalImaAvMinPost_t$p.value, arousalImaNeuMinPost_t$p.value),",
        "+ ",
        "  d = c(arousalImaAvNeuPre_d$Cohens_d, arousalImaAvMinPre_d$Cohens_d, arousalImaNeuMinPre_d$Cohens_d,",
        "+ ",
        "        arousalImaAvNeuMid_d$Cohens_d, arousalImaAvMinMid_d$Cohens_d, arousalImaNeuMinMid_d$Cohens_d,",
        "+ ",
        "        arousalImaAvNeuPost_d$Cohens_d, arousalImaAvMinPost_d$Cohens_d, arousalImaNeuMinPost_d$Cohens_d),",
        "+ ",
        "  BF = c(exp(arousalImaAvNeuPre_BF@bayesFactor[[\"bf\"]][1]), exp(arousalImaAvMinPre_BF@bayesFactor[[\"bf\"]][1]), exp(arousalImaNeuMinPre_BF@bayesFactor[[\"bf\"]][1]),",
        "+ ",
        "         exp(arousalImaAvNeuMid_BF@bayesFactor[[\"bf\"]][1]), exp(arousalImaAvMinMid_BF@bayesFactor[[\"bf\"]][1]), exp(arousalImaNeuMinMid_BF@bayesFactor[[\"bf\"]][1]),",
        "+ ",
        "         exp(arousalImaAvNeuPost_BF@bayesFactor[[\"bf\"]][1]), exp(arousalImaAvMinPost_BF@bayesFactor[[\"bf\"]][1]), exp(arousalImaNeuMinPost_BF@bayesFactor[[\"bf\"]][1])),",
        "+ ",
        "  testDir = c(\"two.sided\",\"two.sided\",\"two.sided\", rep(c(\"one.sided\",\"one.sided\",\"two.sided\"),2))",
        "+ ",
        ")",
        "> ",
        "capture.output(tableArousalIma, file = \"supplement/01s1_timeFactor_arousal_ima_tTable.doc\")",
        "> ",
        "# descriptive statistics for unpleasantness ratings in classical conditioning group",
        "> ",
        "describe(dataUnpleas[dataUnpleas$usGroup == \"real\",])",
        "         vars  n  mean    sd median trimmed   mad min max range  skew kurtosis   se\npartInd*    1 24 26.92 12.68   26.5   27.30 13.34   3  48    45 -0.13    -0.98 2.59\nusGroup*    2 24  2.00  0.00    2.0    2.00  0.00   2   2     0   NaN      NaN 0.00\nAv_Pre      3 24  3.25  1.03    3.0    3.25  1.48   1   5     4 -0.03    -0.60 0.21\nAv_Mid      4 24  3.79  0.98    4.0    3.90  0.74   1   5     4 -0.94     0.83 0.20\nAv_Post     5 24  4.12  0.80    4.0    4.15  1.48   3   5     2 -0.21    -1.47 0.16\nNeu_Pre ",
        "    6 24  3.29  1.08    3.5    3.35  0.74   1   5     4 -0.56    -0.48 0.22\nNeu_Mid     7 24  2.58  0.72    3.0    2.55  1.48   1   4     3  0.06    -0.51 0.15\nNeu_Post    8 24  2.29  0.75    2.0    2.30  0.74   1   4     3  0.11    -0.51 0.15\nMin_Pre     9 24  3.08  0.88    3.0    3.10  1.48   2   4     2 -0.15    -1.75 0.18\nMin_Mid    10 24  2.46  0.93    2.5    2.45  0.74   1   4     3 -0.04    -1.00 0.19\nMin_Post   11 24  2.21  1.02    2.0    2.15  1.48   1   4     3  0.07    -1.42 0.21\n\nRestarting R session...\n\n",
        "Error in file.exists(pythonPath) : \n  file name conversion problem -- name too long?\n",
        "> ",
        "# random number generator seed (necessary for Bayesian ANOVAs)",
        "> ",
        "# created with [set.seed(NULL)] and [sample(2^31 - 1, 1)] ",
        "> ",
        "rngSeed <- 814677222",
        "> ",
        "",
        "> ",
        "# (installing and) loading required packages",
        "> ",
        "# will install newest package version, not necessarily the version originally used!",
        "> ",
        "if(!is.element(\"tidyr\",installed.packages()[,1])) {install.packages(\"tidyr\")}",
        "> ",
        "  library(tidyr) # ver. 1.1.2",
        "> ",
        "if(!is.element(\"psych\",installed.packages()[,1])) {install.packages(\"psych\")}",
        "> ",
        "  library(psych) # ver. 2.0.9",
        "Warning message:\n",
        "Paket ‘psych’ wurde unter R Version 4.3.2 erstellt \n",
        "> ",
        "if(!is.element(\"effectsize\",installed.packages()[,1])) {install.packages(\"effectsize\")}",
        "> ",
        "  library(effectsize) # ver. 2.0.9",
        "\nAttache Paket: ‘effectsize’\n\n",
        "Das folgende Objekt ist maskiert ‘package:psych’:\n\n    phi\n\n",
        "Warning message:\n",
        "Paket ‘effectsize’ wurde unter R Version 4.3.2 erstellt \n",
        "> ",
        "if(!is.element(\"ez\",installed.packages()[,1])) {install.packages(\"ez\")}",
        "> ",
        "  library(ez) # ver. 4.4-0",
        "Warning message:\n",
        "Paket ‘ez’ wurde unter R Version 4.3.2 erstellt \n",
        "> ",
        "if(!is.element(\"BayesFactor\",installed.packages()[,1])) {install.packages(\"BayesFactor\")}",
        "> ",
        "  library(BayesFactor) # ver. 2.0.9",
        "Lade nötiges Paket: coda\n",
        "Lade nötiges Paket: Matrix\n",
        "\nAttache Paket: ‘Matrix’\n\n",
        "Die folgenden Objekte sind maskiert von ‘package:tidyr’:\n\n    expand, pack, unpack\n\n",
        "************\nWelcome to BayesFactor 0.9.12-4.5. If you have questions, please contact Richard Morey (richarddmorey@gmail.com).\n\nType BFManual() to open the manual.\n************\n",
        "Warning messages:\n",
        "1: Paket ‘BayesFactor’ wurde unter R Version 4.3.2 erstellt \n",
        "2: Paket ‘coda’ wurde unter R Version 4.3.2 erstellt \n",
        "> ",
        "if(!is.element(\"ggplot2\",installed.packages()[,1])) {install.packages(\"ggplot2\")}",
        "> ",
        "  library(ggplot2) # ver. 3.3.2",
        "\nAttache Paket: ‘ggplot2’\n\n",
        "Die folgenden Objekte sind maskiert von ‘package:psych’:\n\n    %+%, alpha\n\n",
        "> ",
        "if(!is.element(\"scico\",installed.packages()[,1])) {install.packages(\"scico\")}",
        "> ",
        "  library(scico) # ver. 1.2.0",
        "Warning message:\n",
        "Paket ‘scico’ wurde unter R Version 4.3.2 erstellt \n",
        "> ",
        "if(!is.element(\"scales\",installed.packages()[,1])) {install.packages(\"scales\")}",
        "> ",
        "  library(scales) # ",
        "\nAttache Paket: ‘scales’\n\n",
        "Die folgenden Objekte sind maskiert von ‘package:psych’:\n\n    alpha, rescale\n\n",
        "> ",
        "if(!is.element(\"ggpubr\",installed.packages()[,1])) {install.packages(\"ggpubr\")}",
        "> ",
        "  library(ggpubr) # ",
        "> ",
        "if(!is.element(\"flextable\",installed.packages()[,1])) {install.packages(\"flextable\")}",
        "> ",
        "  library(flextable) # ",
        "\nAttache Paket: ‘flextable’\n\n",
        "Die folgenden Objekte sind maskiert von ‘package:ggpubr’:\n\n    border, font, rotate\n\n",
        "Warning message:\n",
        "Paket ‘flextable’ wurde unter R Version 4.3.2 erstellt \n",
        "> ",
        "if(!is.element(\"stringr\",installed.packages()[,1])) {install.packages(\"stringr\")}",
        "> ",
        "  library(stringr) # ",
        "> ",
        "if(!is.element(\"here\",installed.packages()[,1])) {install.packages(\"here\")}",
        "> ",
        "  library(here) # ",
        "here() starts at C:/Github/imaCond3_LPP\n",
        "> ",
        "# load rating data from text file",
        "> ",
        "# (see imaCond3_allratings_readme.txt for more details)",
        "> ",
        "pathname <- here()",
        "> ",
        "importRatings <- read.csv(paste0(pathname, \"/experimentData/imaCond3_demographicsAndRatings.txt\"), sep=\",\")",
        "> ",
        "# create data frames in wide & long format for fear ratings",
        "> ",
        "dataFear <- data.frame(",
        "+ ",
        "  partInd = factor(1:dim(importRatings)[1]), # could not resovle issue in which Bayes ANOVA crashes using alphanumeric codes as prticipant ID",
        "+ ",
        "  partCode = factor(importRatings$partCode),",
        "+ ",
        "  usGroup = factor(importRatings$group, levels = c(\"ima\", \"real\")),",
        "+ ",
        "  Av_Pre = importRatings$anx_csplus_av_2,",
        "+ ",
        "  Av_Mid = importRatings$anx_csplus_av_3,",
        "+ ",
        "  Av_Post = importRatings$anx_csplus_av_4,",
        "+ ",
        "  Neu_Pre = importRatings$anx_csplus_neu_2,",
        "+ ",
        "  Neu_Mid = importRatings$anx_csplus_neu_3,",
        "+ ",
        "  Neu_Post = importRatings$anx_csplus_neu_4,",
        "+ ",
        "  Min_Pre = importRatings$anx_csminus_2,",
        "+ ",
        "  Min_Mid = importRatings$anx_csminus_3,",
        "+ ",
        "  Min_Post = importRatings$anx_csminus_4",
        "+ ",
        ")  ",
        "> ",
        "dataFearLong <- gather(data = dataFear, key = \"cond\", value = \"fear\",",
        "+ ",
        "                       Av_Pre:Min_Post)",
        "> ",
        "dataFearLong <- separate(data = dataFearLong, col = cond, into = c(\"CS\",\"time\"),",
        "+ ",
        "                         sep = \"_\")",
        "> ",
        "dataFearLong$CS <- factor(dataFearLong$CS, levels = c(\"Av\", \"Neu\", \"Min\"))",
        "> ",
        "dataFearLong$time <- factor(dataFearLong$time, levels = c(\"Pre\", \"Mid\", \"Post\"))",
        "> ",
        "# descriptive statistics for fear ratings in imagery-based conditioning group",
        "> ",
        "describe(dataFear[dataFear$usGroup == \"ima\",])",
        "          vars  n  mean    sd median trimmed   mad min max range  skew kurtosis   se\npartInd*     1 24 22.08 15.09   18.0   21.70 18.53   1  47    46  0.21    -1.52 3.08\npartCode*    2 24 22.08 15.09   18.0   21.70 18.53   1  47    46  0.21    -1.52 3.08\nusGroup*     3 24  1.00  0.00    1.0    1.00  0.00   1   1     0   NaN      NaN 0.00\nAv_Pre       4 24  1.83  0.92    1.5    1.80  0.74   1   3     2  0.31    -1.78 0.19\nAv_Mid       5 24  2.62  1.06    3.0    2.65  1.48   1   4     3 -0.32    -1.20 0.22\nAv_Post  ",
        "    6 24  2.42  1.28    2.0    2.30  1.48   1   5     4  0.65    -0.86 0.26\nNeu_Pre      7 24  1.42  0.83    1.0    1.25  0.00   1   4     3  1.79     2.10 0.17\nNeu_Mid      8 24  1.58  0.78    1.0    1.50  0.00   1   3     2  0.81    -0.94 0.16\nNeu_Post     9 24  1.50  0.93    1.0    1.30  0.00   1   4     3  1.70     1.66 0.19\nMin_Pre     10 24  1.79  1.02    1.5    1.65  0.74   1   5     4  1.34     1.58 0.21\nMin_Mid     11 24  1.54  0.78    1.0    1.45  0.00   1   3     2  0.93    -0.78 0.16\nMin_Post    12",
        " 24  1.54  1.02    1.0    1.35  0.00   1   4     3  1.42     0.39 0.21\n",
        "> ",
        "# frequentist ANOVA in imagery-based conditioning group, including p. eta^2",
        "> ",
        "# IV = CS; DV = fear rating",
        "> ",
        "anovaFearIma <- ezANOVA(",
        "+ ",
        "  data = dataFearLong[dataFearLong$usGroup == \"ima\" & dataFearLong$time == \"Post\",],",
        "+ ",
        "  dv = fear,",
        "+ ",
        "  wid = partInd,",
        "+ ",
        "  within = .(CS),",
        "+ ",
        "  type = 3,",
        "+ ",
        "  detailed = TRUE",
        "+ ",
        "); anovaFearIma$ANOVA$pEtaSq <-",
        "Warning:",
        " You have removed one or more Ss from the analysis. Refactoring \"partInd\" for ANOVA.\n",
        "+ ",
        "  c(anovaFearIma$ANOVA$SSn[1] / (anovaFearIma$ANOVA$SSd[1]+anovaFearIma$ANOVA$SSn[1]),",
        "+ ",
        "    anovaFearIma$ANOVA$SSn[2] / (anovaFearIma$ANOVA$SSd[2]+anovaFearIma$ANOVA$SSn[2])",
        "+ ",
        "  ); print(anovaFearIma)",
        "$ANOVA\n       Effect DFn DFd       SSn      SSd          F            p p<.05       ges    pEtaSq\n1 (Intercept)   1  23 238.34722 36.65278 149.565366 1.512470e-11     * 0.7445119 0.8667172\n2          CS   2  46  12.86111 45.13889   6.553231 3.132031e-03     * 0.1358767 0.2217433\n\n$`Mauchly's Test for Sphericity`\n  Effect         W         p p<.05\n2     CS 0.9737876 0.7466324      \n\n$`Sphericity Corrections`\n  Effect       GGe       p[GG] p[GG]<.05      HFe       p[HF] p[HF]<.05\n2     CS 0.9744572 0.003417074",
        "         * 1.063459 0.003132031         *\n\n",
        "> ",
        "# bayesian ANOVA on fear ratings in imagery-based conditioning group",
        "> ",
        "set.seed(rngSeed); anovaBFFearIma <- anovaBF(",
        "+ ",
        "  formula = fear ~ CS + partInd,",
        "+ ",
        "  data = dataFearLong[dataFearLong$usGroup == \"ima\" & dataFearLong$time == \"Post\",],",
        "+ ",
        "  whichRandom = \"partInd\",",
        "+ ",
        "  iterations = 100000",
        "+ ",
        "); print(anovaBFFearIma)",
        "\r  |                                                                                                                                     \r  |                                                                                                                               |   0%\r  |                                                                                                                                     \r  |================================================================                                                               |  50%",
        "\r  |                                                                                                                                     \r  |===============================================================================================================================| 100%\nBayes factor analysis\n--------------\n[1] CS + partInd : 20.79053 ±0.26%\n\nAgainst denominator:\n  fear ~ partInd \n---\nBayes factor type: BFlinearModel, JZS\n\n",
        "> ",
        "# frequentist & bayesian t-tests on fear ratings in imagery-based conditioning group",
        "> ",
        "# CS+av vs CS+neu",
        "> ",
        "fearImaAvNeu_t <- t.test(x = dataFear$Av_Post[dataFear$usGroup == \"ima\"],",
        "+ ",
        "                         y = dataFear$Neu_Post[dataFear$usGroup == \"ima\"],",
        "+ ",
        "                         alternative = \"greater\", paired = TRUE) # one-sided",
        "> ",
        "fearImaAvNeu_d <- cohens_d(x = dataFear$Av_Post[dataFear$usGroup == \"ima\"],",
        "+ ",
        "                           y = dataFear$Neu_Post[dataFear$usGroup == \"ima\"],",
        "+ ",
        "                           paired = TRUE)",
        "> ",
        "fearImaAvNeu_BF <- ttestBF(x = dataFear$Av_Post[dataFear$usGroup == \"ima\"],",
        "+ ",
        "                           y = dataFear$Neu_Post[dataFear$usGroup == \"ima\"],",
        "+ ",
        "                           nullInterval = c(0, Inf), paired = TRUE) # one-sided x > y",
        "> ",
        "# CS+av vs CS-",
        "> ",
        "fearImaAvMin_t <- t.test(x = dataFear$Av_Post[dataFear$usGroup == \"ima\"],",
        "+ ",
        "                         y = dataFear$Min_Post[dataFear$usGroup == \"ima\"],",
        "+ ",
        "                         alternative = \"greater\", paired = TRUE) # one-sided",
        "> ",
        "fearImaAvMin_d <- cohens_d(x = dataFear$Av_Post[dataFear$usGroup == \"ima\"],",
        "+ ",
        "                           y = dataFear$Min_Post[dataFear$usGroup == \"ima\"],",
        "+ ",
        "                           paired = TRUE)",
        "> ",
        "fearImaAvMin_BF <- ttestBF(x = dataFear$Av_Post[dataFear$usGroup == \"ima\"],",
        "+ ",
        "                           y = dataFear$Min_Post[dataFear$usGroup == \"ima\"],",
        "+ ",
        "                           nullInterval = c(0, Inf), paired = TRUE) # one-sided x > y",
        "> ",
        "# CS+neu vs CS-",
        "> ",
        "fearImaNeuMin_t <- t.test(x = dataFear$Neu_Post[dataFear$usGroup == \"ima\"],",
        "+ ",
        "                          y = dataFear$Min_Post[dataFear$usGroup == \"ima\"],",
        "+ ",
        "                          alternative = \"two.sided\", paired = TRUE) # two-sided",
        "> ",
        "fearImaNeuMin_d <- cohens_d(x = dataFear$Neu_Post[dataFear$usGroup == \"ima\"],",
        "+ ",
        "                            y = dataFear$Min_Post[dataFear$usGroup == \"ima\"],",
        "+ ",
        "                            paired = TRUE)",
        "> ",
        "fearImaNeuMin_BF <- ttestBF(x = dataFear$Neu_Post[dataFear$usGroup == \"ima\"],",
        "+ ",
        "                            y = dataFear$Min_Post[dataFear$usGroup == \"ima\"],",
        "+ ",
        "                            nullIntervall = NULL, paired = TRUE) # two-sided",
        "> ",
        "# descriptive statistics for fear ratings in classical conditioning group",
        "> ",
        "describe(dataFear[dataFear$usGroup == \"real\",])",
        "          vars  n  mean    sd median trimmed   mad min max range  skew kurtosis   se\npartInd*     1 24 26.92 12.68   26.5   27.30 13.34   3  48    45 -0.13    -0.98 2.59\npartCode*    2 24 26.92 12.68   26.5   27.30 13.34   3  48    45 -0.13    -0.98 2.59\nusGroup*     3 24  2.00  0.00    2.0    2.00  0.00   2   2     0   NaN      NaN 0.00\nAv_Pre       4 24  1.79  1.02    1.0    1.65  0.00   1   4     3  0.87    -0.65 0.21\nAv_Mid       5 24  2.71  1.12    3.0    2.65  1.48   1   5     4  0.38    -0.60 0.23\nAv_Post  ",
        "    6 24  2.79  1.18    3.0    2.75  1.48   1   5     4  0.23    -1.01 0.24\nNeu_Pre      7 24  1.67  0.87    1.0    1.55  0.00   1   4     3  1.03     0.06 0.18\nNeu_Mid      8 24  1.38  0.71    1.0    1.25  0.00   1   4     3  2.16     4.95 0.15\nNeu_Post     9 24  1.17  0.48    1.0    1.05  0.00   1   3     2  2.69     6.51 0.10\nMin_Pre     10 24  1.67  0.82    1.5    1.55  0.74   1   4     3  1.09     0.60 0.17\nMin_Mid     11 24  1.21  0.41    1.0    1.15  0.00   1   2     1  1.35    -0.19 0.08\nMin_Post    12",
        " 24  1.21  0.41    1.0    1.15  0.00   1   2     1  1.35    -0.19 0.08\n",
        "> ",
        "# frequentist ANOVA in classical conditioning group, including p. eta^2",
        "> ",
        "# IV = CS; DV = fear rating",
        "> ",
        "anovaFearReal <- ezANOVA(",
        "+ ",
        "  data = dataFearLong[dataFearLong$usGroup == \"real\" & dataFearLong$time == \"Post\",],",
        "+ ",
        "  dv = fear,",
        "+ ",
        "  wid = partInd,",
        "+ ",
        "  within = .(CS),",
        "+ ",
        "  type = 3,",
        "+ ",
        "  detailed = TRUE",
        "+ ",
        "); anovaFearReal$ANOVA$pEtaSq <-",
        "Warning:",
        " You have removed one or more Ss from the analysis. Refactoring \"partInd\" for ANOVA.\n",
        "+ ",
        "  c(anovaFearReal$ANOVA$SSn[1] / (anovaFearReal$ANOVA$SSd[1]+anovaFearReal$ANOVA$SSn[1]),",
        "+ ",
        "    anovaFearReal$ANOVA$SSn[2] / (anovaFearReal$ANOVA$SSd[2]+anovaFearReal$ANOVA$SSn[2])",
        "+ ",
        "  ); print(anovaFearReal)",
        "$ANOVA\n       Effect DFn DFd       SSn      SSd         F            p p<.05       ges    pEtaSq\n1 (Intercept)   1  23 213.55556 17.11111 287.05195 1.738145e-14     * 0.8381118 0.9258189\n2          CS   2  46  41.19444 24.13889  39.25086 1.133435e-10     * 0.4996631 0.6305272\n\n$`Mauchly's Test for Sphericity`\n  Effect         W           p p<.05\n2     CS 0.5943739 0.003270824     *\n\n$`Sphericity Corrections`\n  Effect       GGe        p[GG] p[GG]<.05       HFe        p[HF] p[HF]<.05\n2     CS 0.7114268 3.294793e-08",
        "         * 0.7449661 1.701126e-08         *\n\n",
        "> ",
        "# bayesian ANOVA on fear ratings in classical conditioning group",
        "> ",
        "set.seed(rngSeed); anovaBFFearReal <- anovaBF(",
        "+ ",
        "  formula = fear ~ CS + partInd,",
        "+ ",
        "  data = dataFearLong[dataFearLong$usGroup == \"real\" & dataFearLong$time == \"Post\",],",
        "+ ",
        "  whichRandom = \"partInd\",",
        "+ ",
        "  iterations = 100000",
        "+ ",
        "); print(anovaBFFearReal)",
        "\r  |                                                                                                                                     \r  |                                                                                                                               |   0%\r  |                                                                                                                                     \r  |================================================================                                                               |  50%",
        "\r  |                                                                                                                                     \r  |===============================================================================================================================| 100%\nBayes factor analysis\n--------------\n[1] CS + partInd : 5279821555 ±0.31%\n\nAgainst denominator:\n  fear ~ partInd \n---\nBayes factor type: BFlinearModel, JZS\n\n",
        "> ",
        "# frequentist & bayesian t-tests on fear ratings in classical conditioning group",
        "> ",
        "# CS+av vs CS+neu",
        "> ",
        "fearRealAvNeu_t <- t.test(x = dataFear$Av_Post[dataFear$usGroup == \"real\"],",
        "+ ",
        "                          y = dataFear$Neu_Post[dataFear$usGroup == \"real\"],",
        "+ ",
        "                          alternative = \"greater\", paired = TRUE) # one-sided",
        "> ",
        "fearRealAvNeu_d <- cohens_d(x = dataFear$Av_Post[dataFear$usGroup == \"real\"],",
        "+ ",
        "                            y = dataFear$Neu_Post[dataFear$usGroup == \"real\"],",
        "+ ",
        "                            paired = TRUE)",
        "> ",
        "fearRealAvNeu_BF <- ttestBF(x = dataFear$Av_Post[dataFear$usGroup == \"real\"],",
        "+ ",
        "                            y = dataFear$Neu_Post[dataFear$usGroup == \"real\"],",
        "+ ",
        "                            nullInterval = c(0, Inf), paired = TRUE) # one-sided x > y",
        "> ",
        "# CS+av vs CS-",
        "> ",
        "fearRealAvMin_t <- t.test(x = dataFear$Av_Post[dataFear$usGroup == \"real\"],",
        "+ ",
        "                          y = dataFear$Min_Post[dataFear$usGroup == \"real\"],",
        "+ ",
        "                          alternative = \"greater\", paired = TRUE) # one-sided",
        "> ",
        "fearRealAvMin_d <- cohens_d(x = dataFear$Av_Post[dataFear$usGroup == \"real\"],",
        "+ ",
        "                            y = dataFear$Min_Post[dataFear$usGroup == \"real\"],",
        "+ ",
        "                            paired = TRUE)",
        "Warning message:\n",
        "'y' is numeric but has only 2 unique values.\n  If this is a grouping variable, convert it to a factor. \n",
        "> ",
        "fearRealAvMin_BF <- ttestBF(x = dataFear$Av_Post[dataFear$usGroup == \"real\"],",
        "+ ",
        "                            y = dataFear$Min_Post[dataFear$usGroup == \"real\"],",
        "+ ",
        "                            nullInterval = c(0, Inf), paired = TRUE) # one-sided x > y",
        "> ",
        "# CS+neu vs CS-",
        "> ",
        "fearRealNeuMin_t <- t.test(x = dataFear$Neu_Post[dataFear$usGroup == \"real\"],",
        "+ ",
        "                           y = dataFear$Min_Post[dataFear$usGroup == \"real\"],",
        "+ ",
        "                           alternative = \"two.sided\", paired = TRUE) # two-sided",
        "> ",
        "fearRealNeuMin_d <- cohens_d(x = dataFear$Neu_Post[dataFear$usGroup == \"real\"],",
        "+ ",
        "                             y = dataFear$Min_Post[dataFear$usGroup == \"real\"],",
        "+ ",
        "                             paired = TRUE)",
        "Warning message:\n",
        "'y' is numeric but has only 2 unique values.\n  If this is a grouping variable, convert it to a factor. \n",
        "> ",
        "fearRealNeuMin_BF <- ttestBF(x = dataFear$Neu_Post[dataFear$usGroup == \"real\"],",
        "+ ",
        "                             y = dataFear$Min_Post[dataFear$usGroup == \"real\"],",
        "+ ",
        "                             nullIntervall = NULL, paired = TRUE) # two-sided",
        "> ",
        "# descriptive statistics  for fear ratings across conditioning groups",
        "> ",
        "describe(dataFear)",
        "          vars  n  mean    sd median trimmed   mad min max range skew kurtosis   se\npartInd*     1 48 24.50 14.00   24.5   24.50 17.79   1  48    47 0.00    -1.28 2.02\npartCode*    2 48 24.50 14.00   24.5   24.50 17.79   1  48    47 0.00    -1.28 2.02\nusGroup*     3 48  1.50  0.51    1.5    1.50  0.74   1   2     1 0.00    -2.04 0.07\nAv_Pre       4 48  1.81  0.96    1.0    1.73  0.00   1   4     3 0.65    -1.02 0.14\nAv_Mid       5 48  2.67  1.08    3.0    2.65  1.48   1   5     4 0.07    -0.71 0.16\nAv_Post  ",
        "    6 48  2.60  1.23    2.0    2.52  1.48   1   5     4 0.43    -0.94 0.18\nNeu_Pre      7 48  1.54  0.85    1.0    1.40  0.00   1   4     3 1.40     0.95 0.12\nNeu_Mid      8 48  1.48  0.74    1.0    1.35  0.00   1   4     3 1.44     1.38 0.11\nNeu_Post     9 48  1.33  0.75    1.0    1.15  0.00   1   4     3 2.32     4.65 0.11\nMin_Pre     10 48  1.73  0.92    1.5    1.60  0.74   1   5     4 1.35     1.83 0.13\nMin_Mid     11 48  1.38  0.64    1.0    1.25  0.00   1   3     2 1.42     0.74 0.09\nMin_Post    12 48",
        "  1.38  0.79    1.0    1.20  0.00   1   4     3 2.06     3.32 0.11\n",
        "> ",
        "# frequentist ANOVA on fear ratings across conditioning groups",
        "> ",
        "anovaFear <- ezANOVA(",
        "+ ",
        "  data = dataFearLong[dataFearLong$time == \"Post\",],",
        "+ ",
        "  dv = fear,",
        "+ ",
        "  wid = partInd,",
        "+ ",
        "  within = .(CS),",
        "+ ",
        "  between = .(usGroup),",
        "+ ",
        "  type = 3,",
        "+ ",
        "  detailed = TRUE",
        "+ ",
        "); anovaFear$ANOVA$pEtaSq <- c(anovaFear$ANOVA$SSn[1] /",
        "+ ",
        "                                 (anovaFear$ANOVA$SSd[1]+anovaFear$ANOVA$SSn[1]),",
        "+ ",
        "                               anovaFear$ANOVA$SSn[2] /",
        "+ ",
        "                                 (anovaFear$ANOVA$SSd[2]+anovaFear$ANOVA$SSn[2]),",
        "+ ",
        "                               anovaFear$ANOVA$SSn[3] /",
        "+ ",
        "                                 (anovaFear$ANOVA$SSd[3]+anovaFear$ANOVA$SSn[3]),",
        "+ ",
        "                               anovaFear$ANOVA$SSn[4] /",
        "+ ",
        "                                 (anovaFear$ANOVA$SSd[4]+anovaFear$ANOVA$SSn[4])",
        "+ ",
        "); print(anovaFear)",
        "$ANOVA\n       Effect DFn DFd         SSn      SSd           F            p p<.05         ges      pEtaSq\n1 (Intercept)   1  46 451.5625000 53.76389 386.3536554 5.136735e-24     * 0.785867082 0.893605618\n2     usGroup   1  46   0.3402778 53.76389   0.2911392 5.920939e-01       0.002757922 0.006289308\n3          CS   2  92  50.0416667 69.27778  33.2273456 1.375959e-11     * 0.289118922 0.419392387\n4  usGroup:CS   2  92   4.0138889 69.27778   2.6651965 7.495664e-02       0.031591605 0.054765966\n\n$`Mauchly's Test for Sphericity`\n",
        "      Effect         W         p p<.05\n3         CS 0.9574792 0.3761925      \n4 usGroup:CS 0.9574792 0.3761925      \n\n$`Sphericity Corrections`\n      Effect       GGe        p[GG] p[GG]<.05      HFe        p[HF] p[HF]<.05\n3         CS 0.9592135 3.298870e-11         * 1.000033 1.375959e-11         *\n4 usGroup:CS 0.9592135 7.742254e-02           1.000033 7.495664e-02          \n\n",
        "> ",
        "# bayesian ANOVA on fear ratings across conditioning groups",
        "> ",
        "set.seed(rngSeed); anovaBFFear <- anovaBF(",
        "+ ",
        "  formula = fear ~ usGroup*CS + partInd,",
        "+ ",
        "  data = dataFearLong[dataFearLong$time == \"Post\",],",
        "+ ",
        "  whichRandom = \"partInd\",",
        "+ ",
        "  whichModels = \"all\",",
        "+ ",
        "  iterations = 100000",
        "+ ",
        "); print(anovaBFFear)",
        "\r  |                                                                                                                                     \r  |                                                                                                                               |   0%\r  |                                                                                                                                     \r  |================                                                                                                               |  12%",
        "\r  |                                                                                                                                     \r  |================================                                                                                               |  25%\r  |                                                                                                                                     \r  |================================================                                                                               |  38%",
        "\r  |                                                                                                                                     \r  |================================================================                                                               |  50%\r  |                                                                                                                                     \r  |===============================================================================                                                |  62%",
        "\r  |                                                                                                                                     \r  |===============================================================================================                                |  75%\r  |                                                                                                                                     \r  |===============================================================================================================                |  88%",
        "\r  |                                                                                                                                     \r  |===============================================================================================================================| 100%\nBayes factor analysis\n--------------\n[1] usGroup + partInd                   : 0.2337313  ±0.53%\n[2] CS + partInd                        : 5045302758 ±0.27%\n[3] usGroup:CS + partInd                : 0.4725059  ±0.34%\n[4] usGroup + CS + partInd             ",
        " : 1305816809 ±0.62%\n[5] usGroup + usGroup:CS + partInd      : 0.1136698  ±2.15%\n[6] CS + usGroup:CS + partInd           : 5067516895 ±0.65%\n[7] usGroup + CS + usGroup:CS + partInd : 1332206022 ±0.87%\n\nAgainst denominator:\n  fear ~ partInd \n---\nBayes factor type: BFlinearModel, JZS\n\n",
        "> ",
        "# inclusion factors for bayesian ANOVA effects",
        "> ",
        "bf_nullModel <- 1",
        "> ",
        "bf_usGroup <- exp(anovaBFFear@bayesFactor$bf[1])",
        "> ",
        "bf_cs <- exp(anovaBFFear@bayesFactor$bf[2])",
        "> ",
        "bf_interact <- exp(anovaBFFear@bayesFactor$bf[3])",
        "> ",
        "bf_usGroup_cs <- exp(anovaBFFear@bayesFactor$bf[4])",
        "> ",
        "bf_usGroup_interact <- exp(anovaBFFear@bayesFactor$bf[5])",
        "> ",
        "bf_cs_interact <- exp(anovaBFFear@bayesFactor$bf[6])",
        "> ",
        "bf_fullModel <- exp(anovaBFFear@bayesFactor$bf[7])",
        "> ",
        "# main effect US group: models [1] and [3] vs. null model and model [2]",
        "> ",
        "bfIncGroupFear <- (bf_usGroup + bf_usGroup_cs + bf_usGroup_interact + bf_fullModel) / ",
        "+ ",
        "  (bf_nullModel + bf_cs + bf_interact + bf_cs_interact); bfIncGroupFear",
        "[1] 0.2608593\n",
        "> ",
        "# main effect CS type: models \"main effect CS\" & \"main effects CS & group\" vs.",
        "> ",
        "#                      null model and \"main effect group\"",
        "> ",
        "bfIncCsFear <- (bf_cs + bf_usGroup_cs + bf_cs_interact + bf_fullModel) / ",
        "+ ",
        "  (bf_nullModel + bf_usGroup + bf_interact + bf_usGroup_interact); bfIncCsFear",
        "[1] 7006315473\n",
        "> ",
        "# interaction: Full model vs. main-effects-only model",
        "> ",
        "bfIncInteractFear <- (bf_interact + bf_usGroup_interact + bf_cs_interact + bf_fullModel) / ",
        "+ ",
        "  (bf_nullModel + bf_usGroup + bf_cs + bf_usGroup_cs); bfIncInteractFear",
        "[1] 1.007653\n",
        "> ",
        "# quick graph of group x CS ANOVA on fear ratings",
        "> ",
        "ezPlot(",
        "+ ",
        "  data = dataFearLong[dataFearLong$time == \"Post\",],",
        "+ ",
        "  dv = fear,",
        "+ ",
        "  wid = partInd,",
        "+ ",
        "  within = .(CS),",
        "+ ",
        "  between = .(usGroup),",
        "+ ",
        "  x = CS,",
        "+ ",
        "  split = usGroup",
        "+ ",
        ")  ",
        "> ",
        "# frequentist & bayesian t-tests on fear ratings (difference scores) across groups",
        "> ",
        "# delta [CS+av - CS+neu]",
        "> ",
        "fearBothAvNeu_t <- t.test(x = dataFear$Av_Post[dataFear$usGroup == \"real\"] -",
        "+ ",
        "                            dataFear$Neu_Post[dataFear$usGroup == \"real\"],",
        "+ ",
        "                          y = dataFear$Av_Post[dataFear$usGroup == \"ima\"] -",
        "+ ",
        "                            dataFear$Neu_Post[dataFear$usGroup == \"ima\"],",
        "+ ",
        "                          alternative = \"two.sided\", paired = FALSE) # two-sided",
        "> ",
        "fearBothAvNeu_d <- cohens_d(x = dataFear$Av_Post[dataFear$usGroup == \"real\"] -",
        "+ ",
        "                              dataFear$Neu_Post[dataFear$usGroup == \"real\"],",
        "+ ",
        "                            y = dataFear$Av_Post[dataFear$usGroup == \"ima\"] -",
        "+ ",
        "                              dataFear$Neu_Post[dataFear$usGroup == \"ima\"],",
        "+ ",
        "                            paired = FALSE)",
        "> ",
        "fearBothAvNeu_BF <- ttestBF(x = dataFear$Av_Post[dataFear$usGroup == \"real\"] -",
        "+ ",
        "                              dataFear$Neu_Post[dataFear$usGroup == \"real\"],",
        "+ ",
        "                            y = dataFear$Av_Post[dataFear$usGroup == \"ima\"] -",
        "+ ",
        "                              dataFear$Neu_Post[dataFear$usGroup == \"ima\"],",
        "+ ",
        "                            nullInterval = NULL, paired = FALSE) # two-sided",
        "> ",
        "# delta [CS+av - CS-]",
        "> ",
        "fearBothAvMin_t <- t.test(x = dataFear$Av_Post[dataFear$usGroup == \"real\"] -",
        "+ ",
        "                            dataFear$Min_Post[dataFear$usGroup == \"real\"],",
        "+ ",
        "                          y = dataFear$Av_Post[dataFear$usGroup == \"ima\"] -",
        "+ ",
        "                            dataFear$Min_Post[dataFear$usGroup == \"ima\"],",
        "+ ",
        "                          alternative = \"two.sided\", paired = FALSE) # two-sided",
        "> ",
        "fearBothAvMin_d <- cohens_d(x = dataFear$Av_Post[dataFear$usGroup == \"real\"] -",
        "+ ",
        "                              dataFear$Min_Post[dataFear$usGroup == \"real\"],",
        "+ ",
        "                            y = dataFear$Av_Post[dataFear$usGroup == \"ima\"] -",
        "+ ",
        "                              dataFear$Min_Post[dataFear$usGroup == \"ima\"],",
        "+ ",
        "                            paired = FALSE)",
        "> ",
        "fearBothAvMin_BF <- ttestBF(x = dataFear$Av_Post[dataFear$usGroup == \"real\"] -",
        "+ ",
        "                              dataFear$Min_Post[dataFear$usGroup == \"real\"],",
        "+ ",
        "                            y = dataFear$Av_Post[dataFear$usGroup == \"ima\"] -",
        "+ ",
        "                              dataFear$Min_Post[dataFear$usGroup == \"ima\"],",
        "+ ",
        "                            nullInterval = NULL, paired = FALSE) # two-sided",
        "> ",
        "# delta [CS+neu - CS-]",
        "> ",
        "fearBothNeuMin_t <- t.test(x = dataFear$Neu_Post[dataFear$usGroup == \"real\"] -",
        "+ ",
        "                             dataFear$Min_Post[dataFear$usGroup == \"real\"],",
        "+ ",
        "                           y = dataFear$Neu_Post[dataFear$usGroup == \"ima\"] - ",
        "+ ",
        "                             dataFear$Min_Post[dataFear$usGroup == \"ima\"],",
        "+ ",
        "                           alternative = \"two.sided\", paired = FALSE) # two-sided",
        "> ",
        "fearBothNeuMin_d <- cohens_d(x = dataFear$Neu_Post[dataFear$usGroup == \"real\"] -",
        "+ ",
        "                               dataFear$Min_Post[dataFear$usGroup == \"real\"],",
        "+ ",
        "                             y = dataFear$Neu_Post[dataFear$usGroup == \"ima\"] -",
        "+ ",
        "                               dataFear$Min_Post[dataFear$usGroup == \"ima\"],",
        "+ ",
        "                             paired = FALSE)",
        "> ",
        "fearBothNeuMin_BF <- ttestBF(x = dataFear$Neu_Post[dataFear$usGroup == \"real\"] -",
        "+ ",
        "                               dataFear$Min_Post[dataFear$usGroup == \"real\"],",
        "+ ",
        "                             y = dataFear$Neu_Post[dataFear$usGroup == \"ima\"] - ",
        "+ ",
        "                               dataFear$Min_Post[dataFear$usGroup == \"ima\"],",
        "+ ",
        "                             nullInterval = NULL, paired = FALSE) # two-sided",
        "> ",
        "tableData <- data.frame(",
        "+ ",
        "  comparison = rep(c(\"imagery: CS+av vs CS+neu\", \"imagery: CS+av vs CS-\", \"imagery: CSneu vs CS-\",",
        "+ ",
        "                     \"classical: CS+av vs CS+neu\", \"classical: CS+av vs CS-\", \"classical: CSneu vs CS-\",",
        "+ ",
        "                     \"groups: delta CS+av / CS+neu\", \"groups: delta CS+av / CS-\", \"groups: delta CSneu / CS-\"), 5),",
        "+ ",
        "  t = c(fearImaAvNeu_t$statistic, fearImaAvMin_t$statistic, fearImaNeuMin_t$statistic,",
        "+ ",
        "        fearRealAvNeu_t$statistic, fearRealAvMin_t$statistic, fearRealNeuMin_t$statistic,",
        "+ ",
        "        fearBothAvNeu_t$statistic, fearBothAvMin_t$statistic, fearBothNeuMin_t$statistic), ",
        "+ ",
        "  df = c(fearImaAvNeu_t$parameter, fearImaAvMin_t$parameter, fearImaNeuMin_t$parameter,",
        "+ ",
        "         fearRealAvNeu_t$parameter, fearRealAvMin_t$parameter, fearRealNeuMin_t$parameter,",
        "+ ",
        "         fearBothAvNeu_t$parameter, fearBothAvMin_t$parameter, fearBothNeuMin_t$parameter), ",
        "+ ",
        "  p = c(fearImaAvNeu_t$p.value, fearImaAvMin_t$p.value, fearImaNeuMin_t$p.value,",
        "+ ",
        "        fearRealAvNeu_t$p.value, fearRealAvMin_t$p.value, fearRealNeuMin_t$p.value,",
        "+ ",
        "        fearBothAvNeu_t$p.value*3, fearBothAvMin_t$p.value*3, fearBothNeuMin_t$p.value*3),  # Bonferroni",
        "+ ",
        "  d = c(fearImaAvNeu_d$Cohens_d, fearImaAvMin_d$Cohens_d, fearImaNeuMin_d$Cohens_d,",
        "+ ",
        "        fearRealAvNeu_d$Cohens_d, fearRealAvMin_d$Cohens_d, fearRealNeuMin_d$Cohens_d,",
        "+ ",
        "        fearBothAvNeu_d$Cohens_d, fearBothAvMin_d$Cohens_d, fearBothNeuMin_d$Cohens_d), ",
        "+ ",
        "  BF = c(exp(fearImaAvNeu_BF@bayesFactor[[\"bf\"]][1]), exp(fearImaAvMin_BF@bayesFactor[[\"bf\"]][1]), exp(fearImaNeuMin_BF@bayesFactor[[\"bf\"]][1]),",
        "+ ",
        "         exp(fearRealAvNeu_BF@bayesFactor[[\"bf\"]][1]), exp(fearRealAvMin_BF@bayesFactor[[\"bf\"]][1]), exp(fearRealNeuMin_BF@bayesFactor[[\"bf\"]][1]),",
        "+ ",
        "         exp(fearBothAvNeu_BF@bayesFactor[[\"bf\"]][1]), exp(fearBothAvMin_BF@bayesFactor[[\"bf\"]][1]), exp(fearBothNeuMin_BF@bayesFactor[[\"bf\"]][1]))",
        "+ ",
        ")",
        "> ",
        "# round the numbers",
        "> ",
        "tableData$t <-round(tableData$t, 2)",
        "> ",
        "tableData$df <-round(tableData$df, 0)",
        "> ",
        "tableData$p[tableData$p < .001] <- 0",
        "> ",
        "tableData$p[tableData$p > 1] <- 1",
        "> ",
        "tableData$p <-round(tableData$p, 3)",
        "> ",
        "tableData$p <- as.character(tableData$p)",
        "> ",
        "tableData$p[tableData$p == \"0\"] <- \"< .001\"",
        "> ",
        "tableData$p <- str_replace(tableData$p, \"0\\\\.\", \"\\\\.\")",
        "> ",
        "tableData$d <-round(tableData$d, 2)",
        "> ",
        "tableData$BF <- format(tableData$BF, digits = 2)",
        "> ",
        "tableFear <- flextable(tableData[1:9,])",
        "> ",
        "tableFear <- add_header_lines(tableFear, top = TRUE, values = \"fear\")",
        "> ",
        "save_as_docx(tableFear, path = paste0(pathname, \"/tables/tableFear_raw.docx\"))",
        "> ",
        "#############################",
        "> ",
        "### Plot for fear ratings ###",
        "> ",
        "#############################",
        "> ",
        "# remove between-subject variance for plotting standard errors based on",
        "> ",
        "# within-subject variance",
        "> ",
        "dataFearWithin <- dataFear[,c(\"partInd\",\"usGroup\",\"Av_Post\",\"Neu_Post\",\"Min_Post\")]",
        "> ",
        "# remove each participant's average from each single value",
        "> ",
        "dataFearWithin[,3:5] <- as.matrix(dataFearWithin[,3:5]) -",
        "+ ",
        "  rowMeans(as.matrix(dataFearWithin[,3:5])) ",
        "> ",
        "# prepare data frame for bar plot with means from standard dataset and SE from",
        "> ",
        "# dataset without between-subject variance",
        "> ",
        "plotDataFear <- data.frame(",
        "+ ",
        "  usGroup = factor(c(rep(\"Imagery-Based\",3),rep(\"Classical\",3)),",
        "+ ",
        "                   levels = c(\"Imagery-Based\",\"Classical\")),",
        "+ ",
        "  CS = factor(c(\"CS+ av\",\"CS+ neu\",\"CS- \",\"CS+ av\",\"CS+ neu\",\"CS- \"),",
        "+ ",
        "              levels = c(\"CS+ av\",\"CS+ neu\",\"CS- \")),",
        "+ ",
        "  mean = c(describe(dataFear[dataFear$usGroup == \"ima\", c(5,8,11)])$mean,",
        "+ ",
        "           describe(dataFear[dataFear$usGroup == \"real\", c(5,8,11)])$mean),",
        "+ ",
        "  se = c(describe(dataFearWithin[dataFearWithin$usGroup == \"ima\", 3:5])$se,",
        "+ ",
        "         describe(dataFearWithin[dataFearWithin$usGroup == \"real\", 3:5])$se)",
        "+ ",
        ")",
        "> ",
        "# some general settings",
        "> ",
        "plotFS <- 9",
        "> ",
        "showSig <- TRUE",
        "> ",
        "csLabels = c(expression(paste(\"CS+\"[av])), expression(paste(\"CS+\"[neu])), \"CS-\",",
        "+ ",
        "             expression(paste(\"CS+\"[av])), expression(paste(\"CS+\"[neu])), \"CS-\")",
        "> ",
        "# bar graphs of group x CS effects on fear ratings",
        "> ",
        "graphFear <- ggplot(data = plotDataFear, aes(x = usGroup, y = mean, fill = CS)) +",
        "+ ",
        "  theme_classic() +",
        "+ ",
        "  geom_col(aes(fill = CS), position = position_dodge(width = .9)) +",
        "+ ",
        "  scale_fill_discrete(type = scico(n = 3, palette = \"davos\", begin = .1, end = .7)) +",
        "+ ",
        "  geom_errorbar(aes(ymin = mean-se, ymax = mean+se, width = .1), position = position_dodge(width = .9)) +",
        "+ ",
        "  scale_y_continuous(name = \"Fear rating (1-5)\", limits = c(0.5,5.2), oob = rescale_none, expand = c(0,0)) +",
        "+ ",
        "  #labs(title = \"Fear\") +",
        "+ ",
        "  geom_vline(xintercept = 0.41) +",
        "+ ",
        "  geom_rect(aes(xmin = 0.4, xmax = 2.6, ymin = 0.45, ymax = 1), fill = \"white\") +",
        "+ ",
        "  geom_hline(yintercept = 1) +",
        "+ ",
        "  geom_text(aes(y = 0.8), label = csLabels, position = position_dodge(.9), colour = \"black\", size = plotFS/.pt) + ",
        "+ ",
        "  geom_text(aes(label = usGroup, y = 5), colour = \"black\", size = plotFS/.pt, fontface = \"bold\") +",
        "+ ",
        "  theme(legend.position = \"none\",",
        "+ ",
        "        plot.title = element_text(size = plotFS, color = \"black\", face = \"bold\", hjust = .5),",
        "+ ",
        "        axis.line.x = element_blank(),",
        "+ ",
        "        axis.title.x = element_blank(),",
        "+ ",
        "        axis.text.x = element_blank(),",
        "+ ",
        "        axis.ticks.x = element_blank(),",
        "+ ",
        "        axis.line.y  = element_blank(),",
        "+ ",
        "        axis.title.y = element_text(margin = margin(r = 5), size = plotFS),",
        "+ ",
        "        axis.text.y = element_text(margin = margin(r = 5), size = plotFS, color = \"black\"),",
        "+ ",
        "        axis.ticks.y = element_line(colour = \"black\"))",
        "> ",
        "if (showSig == TRUE){",
        "+ ",
        "  graphFear <- graphFear +",
        "+ ",
        "    geom_segment(aes(x = 0.7, y = mean+se+.1, xend = 1.0, yend = mean+se+.1), data = plotDataFear[1,]) +",
        "+ ",
        "    geom_text(aes(label = \"***\", x = 0.85, y = mean+se+.15), size = plotFS/2, data = plotDataFear[1,]) +",
        "+ ",
        "    geom_segment(aes(x = 0.7, y = mean+se+.4, xend = 1.3, yend = mean+se+.4), data = plotDataFear[1,]) +",
        "+ ",
        "    geom_text(aes(label = \"**\", x = 1.0, y = mean+se+.45), size = plotFS/2, data = plotDataFear[1,]) +",
        "+ ",
        "    geom_segment(aes(x = 1.7, y = mean+se+.1, xend = 2.0, yend = mean+se+.1), data = plotDataFear[4,]) +",
        "+ ",
        "    geom_text(aes(label = \"***\", x = 1.85, y = mean+se+.15), size = plotFS/2, data = plotDataFear[4,]) +",
        "+ ",
        "    geom_segment(aes(x = 1.7, y = mean+se+.4, xend = 2.3, yend = mean+se+.4), data = plotDataFear[4,]) +",
        "+ ",
        "    geom_text(aes(label = \"***\", x = 2.0, y = mean+se+.45), size = plotFS/2, data = plotDataFear[4,])",
        "+ ",
        "}",
        "> ",
        "graphFear",
        "Warning message:\n",
        "In is.na(x) :",
        " is.na() applied to non-(list or vector) of type 'expression'\n",
        "> ",
        "# saving it",
        "> ",
        "graphFear <- graphFear + theme(plot.title = element_blank(),",
        "+ ",
        "                               plot.margin = margin(0,0,0,0))",
        "> ",
        "ggsave(filename = paste0(pathname, \"/figures/Figure2_barplotFear.eps\"),",
        "+ ",
        "       plot = graphFear,",
        "+ ",
        "       width = 100,",
        "+ ",
        "       height = 70,",
        "+ ",
        "       units = \"mm\",",
        "+ ",
        "       dpi = 300",
        "+ ",
        ")",
        "Warning message:\n",
        "In is.na(x) :",
        " is.na() applied to non-(list or vector) of type 'expression'\n",
        "> ",
        "ggsave(filename = paste0(pathname, \"/figures/Figure2_barplotFear.pdf\"),",
        "+ ",
        "       plot = graphFear,",
        "+ ",
        "       width = 100,",
        "+ ",
        "       height = 70,",
        "+ ",
        "       units = \"mm\",",
        "+ ",
        "       dpi = 300",
        "+ ",
        ")",
        "Warning message:\n",
        "In is.na(x) :",
        " is.na() applied to non-(list or vector) of type 'expression'\n",
        "> ",
        "# add margins to subplots",
        "> ",
        "graphFear <- graphFear + theme(plot.title = element_blank(),",
        "+ ",
        "                               plot.margin = margin(5,5,5,5))",
        "> ",
        "",
        "> ",
        "# saving it",
        "> ",
        "ggsave(filename = paste0(pathname, \"/figures/Figure2_barplotFear.eps\"),",
        "+ ",
        "       plot = graphFear,",
        "+ ",
        "       width = 100,",
        "+ ",
        "       height = 70,",
        "+ ",
        "       units = \"mm\",",
        "+ ",
        "       dpi = 300",
        "+ ",
        ")",
        "Warning message:\n",
        "In is.na(x) :",
        " is.na() applied to non-(list or vector) of type 'expression'\n",
        "> ",
        "",
        "> ",
        "ggsave(filename = paste0(pathname, \"/figures/Figure2_barplotFear.pdf\"),",
        "+ ",
        "       plot = graphFear,",
        "+ ",
        "       width = 100,",
        "+ ",
        "       height = 70,",
        "+ ",
        "       units = \"mm\",",
        "+ ",
        "       dpi = 300",
        "+ ",
        ")",
        "Warning message:\n",
        "In is.na(x) :",
        " is.na() applied to non-(list or vector) of type 'expression'\n",
        "\nRestarting R session...\n\n",
        "Error in file.exists(pythonPath) : \n  file name conversion problem -- name too long?\n",
        "\nRestarting R session...\n\n"
    ]
}