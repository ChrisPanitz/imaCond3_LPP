### Pre
# CS+av vs CS+neu
arousalImaAvNeuPre_t <- t.test(x = dataArousal$Av_Pre[dataArousal$usGroup == "ima"],
y = dataArousal$Neu_Pre[dataArousal$usGroup == "ima"],
alternative = "two.sided", paired = TRUE) # two-sided
arousalImaAvNeuPre_d <- cohens_d(x = dataArousal$Av_Pre[dataArousal$usGroup == "ima"],
y = dataArousal$Neu_Pre[dataArousal$usGroup == "ima"],
paired = TRUE)
arousalImaAvNeuPre_BF <- ttestBF(x = dataArousal$Av_Pre[dataArousal$usGroup == "ima"],
y = dataArousal$Neu_Pre[dataArousal$usGroup == "ima"],
nullInterval = NULL, paired = TRUE) # two-sided
# CS+av vs CS-
arousalImaAvMinPre_t <- t.test(x = dataArousal$Av_Pre[dataArousal$usGroup == "ima"],
y = dataArousal$Min_Pre[dataArousal$usGroup == "ima"],
alternative = "two.sided", paired = TRUE) # two-sided
arousalImaAvMinPre_d <- cohens_d(x = dataArousal$Av_Pre[dataArousal$usGroup == "ima"],
y = dataArousal$Min_Pre[dataArousal$usGroup == "ima"],
paired = TRUE)
arousalImaAvMinPre_BF <- ttestBF(x = dataArousal$Av_Pre[dataArousal$usGroup == "ima"],
y = dataArousal$Min_Pre[dataArousal$usGroup == "ima"],
nullInterval = NULL, paired = TRUE) # two-sided
# CS+neu vs CS-
arousalImaNeuMinPre_t <- t.test(x = dataArousal$Neu_Pre[dataArousal$usGroup == "ima"],
y = dataArousal$Min_Pre[dataArousal$usGroup == "ima"],
alternative = "two.sided", paired = TRUE) # two-sided
arousalImaNeuMinPre_d <- cohens_d(x = dataArousal$Neu_Pre[dataArousal$usGroup == "ima"],
y = dataArousal$Min_Pre[dataArousal$usGroup == "ima"],
paired = TRUE)
arousalImaNeuMinPre_BF <- ttestBF(x = dataArousal$Neu_Pre[dataArousal$usGroup == "ima"],
y = dataArousal$Min_Pre[dataArousal$usGroup == "ima"],
nullIntervall = NULL, paired = TRUE) # two-sided
### Mid
# CS+av vs CS+neu
arousalImaAvNeuMid_t <- t.test(x = dataArousal$Av_Mid[dataArousal$usGroup == "ima"],
y = dataArousal$Neu_Mid[dataArousal$usGroup == "ima"],
alternative = "greater", paired = TRUE) # one-sided
arousalImaAvNeuMid_d <- cohens_d(x = dataArousal$Av_Mid[dataArousal$usGroup == "ima"],
y = dataArousal$Neu_Mid[dataArousal$usGroup == "ima"],
paired = TRUE)
arousalImaAvNeuMid_BF <- ttestBF(x = dataArousal$Av_Mid[dataArousal$usGroup == "ima"],
y = dataArousal$Neu_Mid[dataArousal$usGroup == "ima"],
nullInterval = c(0, Inf), paired = TRUE) # one-sided x > y
# CS+av vs CS-
arousalImaAvMinMid_t <- t.test(x = dataArousal$Av_Mid[dataArousal$usGroup == "ima"],
y = dataArousal$Min_Mid[dataArousal$usGroup == "ima"],
alternative = "greater", paired = TRUE) # one-sided
arousalImaAvMinMid_d <- cohens_d(x = dataArousal$Av_Mid[dataArousal$usGroup == "ima"],
y = dataArousal$Min_Mid[dataArousal$usGroup == "ima"],
paired = TRUE)
arousalImaAvMinMid_BF <- ttestBF(x = dataArousal$Av_Mid[dataArousal$usGroup == "ima"],
y = dataArousal$Min_Mid[dataArousal$usGroup == "ima"],
nullInterval = c(0, Inf), paired = TRUE) # one-sided x > y
# CS+neu vs CS-
arousalImaNeuMinMid_t <- t.test(x = dataArousal$Neu_Mid[dataArousal$usGroup == "ima"],
y = dataArousal$Min_Mid[dataArousal$usGroup == "ima"],
alternative = "two.sided", paired = TRUE) # two-sided
arousalImaNeuMinMid_d <- cohens_d(x = dataArousal$Neu_Mid[dataArousal$usGroup == "ima"],
y = dataArousal$Min_Mid[dataArousal$usGroup == "ima"],
paired = TRUE)
arousalImaNeuMinMid_BF <- ttestBF(x = dataArousal$Neu_Mid[dataArousal$usGroup == "ima"],
y = dataArousal$Min_Mid[dataArousal$usGroup == "ima"],
nullIntervall = NULL, paired = TRUE) # two-sided
### Post
# CS+av vs CS+neu
arousalImaAvNeuPost_t <- t.test(x = dataArousal$Av_Post[dataArousal$usGroup == "ima"],
y = dataArousal$Neu_Post[dataArousal$usGroup == "ima"],
alternative = "greater", paired = TRUE) # one-sided
arousalImaAvNeuPost_d <- cohens_d(x = dataArousal$Av_Post[dataArousal$usGroup == "ima"],
y = dataArousal$Neu_Post[dataArousal$usGroup == "ima"],
paired = TRUE)
arousalImaAvNeuPost_BF <- ttestBF(x = dataArousal$Av_Post[dataArousal$usGroup == "ima"],
y = dataArousal$Neu_Post[dataArousal$usGroup == "ima"],
nullInterval = c(0, Inf), paired = TRUE) # one-sided x > y
# CS+av vs CS-
arousalImaAvMinPost_t <- t.test(x = dataArousal$Av_Post[dataArousal$usGroup == "ima"],
y = dataArousal$Min_Post[dataArousal$usGroup == "ima"],
alternative = "greater", paired = TRUE) # one-sided
arousalImaAvMinPost_d <- cohens_d(x = dataArousal$Av_Post[dataArousal$usGroup == "ima"],
y = dataArousal$Min_Post[dataArousal$usGroup == "ima"],
paired = TRUE)
arousalImaAvMinPost_BF <- ttestBF(x = dataArousal$Av_Post[dataArousal$usGroup == "ima"],
y = dataArousal$Min_Post[dataArousal$usGroup == "ima"],
nullInterval = c(0, Inf), paired = TRUE) # one-sided x > y
# CS+neu vs CS-
arousalImaNeuMinPost_t <- t.test(x = dataArousal$Neu_Post[dataArousal$usGroup == "ima"],
y = dataArousal$Min_Post[dataArousal$usGroup == "ima"],
alternative = "two.sided", paired = TRUE) # two-sided
arousalImaNeuMinPost_d <- cohens_d(x = dataArousal$Neu_Post[dataArousal$usGroup == "ima"],
y = dataArousal$Min_Post[dataArousal$usGroup == "ima"],
paired = TRUE)
arousalImaNeuMinPost_BF <- ttestBF(x = dataArousal$Neu_Post[dataArousal$usGroup == "ima"],
y = dataArousal$Min_Post[dataArousal$usGroup == "ima"],
nullIntervall = NULL, paired = TRUE) # two-sided
tableArousalIma <- data.frame(
time = c(rep("Pre",3), rep("Mid",3), rep("Post",3)),
comparison = rep(c("CS+av vs CS+neu", "CS+av vs CS-", "CSneu vs CS-"), 3),
t = c(arousalImaAvNeuPre_t$statistic, arousalImaAvMinPre_t$statistic, arousalImaNeuMinPre_t$statistic,
arousalImaAvNeuMid_t$statistic, arousalImaAvMinMid_t$statistic, arousalImaNeuMinMid_t$statistic,
arousalImaAvNeuPost_t$statistic, arousalImaAvMinPost_t$statistic, arousalImaNeuMinPost_t$statistic),
df = c(arousalImaAvNeuPre_t$parameter, arousalImaAvMinPre_t$parameter, arousalImaNeuMinPre_t$parameter,
arousalImaAvNeuMid_t$parameter, arousalImaAvMinMid_t$parameter, arousalImaNeuMinMid_t$parameter,
arousalImaAvNeuPost_t$parameter, arousalImaAvMinPost_t$parameter, arousalImaNeuMinPost_t$parameter),
p = c(arousalImaAvNeuPre_t$p.value, arousalImaAvMinPre_t$p.value, arousalImaNeuMinPre_t$p.value,
arousalImaAvNeuMid_t$p.value, arousalImaAvMinMid_t$p.value, arousalImaNeuMinMid_t$p.value,
arousalImaAvNeuPost_t$p.value, arousalImaAvMinPost_t$p.value, arousalImaNeuMinPost_t$p.value),
d = c(arousalImaAvNeuPre_d$Cohens_d, arousalImaAvMinPre_d$Cohens_d, arousalImaNeuMinPre_d$Cohens_d,
arousalImaAvNeuMid_d$Cohens_d, arousalImaAvMinMid_d$Cohens_d, arousalImaNeuMinMid_d$Cohens_d,
arousalImaAvNeuPost_d$Cohens_d, arousalImaAvMinPost_d$Cohens_d, arousalImaNeuMinPost_d$Cohens_d),
BF = c(exp(arousalImaAvNeuPre_BF@bayesFactor[["bf"]][1]), exp(arousalImaAvMinPre_BF@bayesFactor[["bf"]][1]), exp(arousalImaNeuMinPre_BF@bayesFactor[["bf"]][1]),
exp(arousalImaAvNeuMid_BF@bayesFactor[["bf"]][1]), exp(arousalImaAvMinMid_BF@bayesFactor[["bf"]][1]), exp(arousalImaNeuMinMid_BF@bayesFactor[["bf"]][1]),
exp(arousalImaAvNeuPost_BF@bayesFactor[["bf"]][1]), exp(arousalImaAvMinPost_BF@bayesFactor[["bf"]][1]), exp(arousalImaNeuMinPost_BF@bayesFactor[["bf"]][1])),
testDir = c("two.sided","two.sided","two.sided", rep(c("one.sided","one.sided","two.sided"),2))
)
capture.output(tableArousalIma, file = "supplement/01s1_timeFactor_arousal_ima_tTable.doc")
# descriptive statistics for unpleasantness ratings in classical conditioning group
describe(dataUnpleas[dataUnpleas$usGroup == "real",])
# random number generator seed (necessary for Bayesian ANOVAs)
# created with [set.seed(NULL)] and [sample(2^31 - 1, 1)]
rngSeed <- 814677222
# (installing and) loading required packages
# will install newest package version, not necessarily the version originally used!
if(!is.element("tidyr",installed.packages()[,1])) {install.packages("tidyr")}
library(tidyr) # ver. 1.1.2
if(!is.element("psych",installed.packages()[,1])) {install.packages("psych")}
library(psych) # ver. 2.0.9
if(!is.element("effectsize",installed.packages()[,1])) {install.packages("effectsize")}
library(effectsize) # ver. 2.0.9
if(!is.element("ez",installed.packages()[,1])) {install.packages("ez")}
library(ez) # ver. 4.4-0
if(!is.element("BayesFactor",installed.packages()[,1])) {install.packages("BayesFactor")}
library(BayesFactor) # ver. 2.0.9
if(!is.element("ggplot2",installed.packages()[,1])) {install.packages("ggplot2")}
library(ggplot2) # ver. 3.3.2
if(!is.element("scico",installed.packages()[,1])) {install.packages("scico")}
library(scico) # ver. 1.2.0
if(!is.element("scales",installed.packages()[,1])) {install.packages("scales")}
library(scales) #
if(!is.element("ggpubr",installed.packages()[,1])) {install.packages("ggpubr")}
library(ggpubr) #
if(!is.element("flextable",installed.packages()[,1])) {install.packages("flextable")}
library(flextable) #
if(!is.element("stringr",installed.packages()[,1])) {install.packages("stringr")}
library(stringr) #
if(!is.element("here",installed.packages()[,1])) {install.packages("here")}
library(here) #
# load rating data from text file
# (see imaCond3_allratings_readme.txt for more details)
pathname <- here()
importRatings <- read.csv(paste0(pathname, "/experimentData/imaCond3_demographicsAndRatings.txt"), sep=",")
# create data frames in wide & long format for fear ratings
dataFear <- data.frame(
partInd = factor(1:dim(importRatings)[1]), # could not resovle issue in which Bayes ANOVA crashes using alphanumeric codes as prticipant ID
partCode = factor(importRatings$partCode),
usGroup = factor(importRatings$group, levels = c("ima", "real")),
Av_Pre = importRatings$anx_csplus_av_2,
Av_Mid = importRatings$anx_csplus_av_3,
Av_Post = importRatings$anx_csplus_av_4,
Neu_Pre = importRatings$anx_csplus_neu_2,
Neu_Mid = importRatings$anx_csplus_neu_3,
Neu_Post = importRatings$anx_csplus_neu_4,
Min_Pre = importRatings$anx_csminus_2,
Min_Mid = importRatings$anx_csminus_3,
Min_Post = importRatings$anx_csminus_4
)
dataFearLong <- gather(data = dataFear, key = "cond", value = "fear",
Av_Pre:Min_Post)
dataFearLong <- separate(data = dataFearLong, col = cond, into = c("CS","time"),
sep = "_")
dataFearLong$CS <- factor(dataFearLong$CS, levels = c("Av", "Neu", "Min"))
dataFearLong$time <- factor(dataFearLong$time, levels = c("Pre", "Mid", "Post"))
# descriptive statistics for fear ratings in imagery-based conditioning group
describe(dataFear[dataFear$usGroup == "ima",])
# frequentist ANOVA in imagery-based conditioning group, including p. eta^2
# IV = CS; DV = fear rating
anovaFearIma <- ezANOVA(
data = dataFearLong[dataFearLong$usGroup == "ima" & dataFearLong$time == "Post",],
dv = fear,
wid = partInd,
within = .(CS),
type = 3,
detailed = TRUE
); anovaFearIma$ANOVA$pEtaSq <-
c(anovaFearIma$ANOVA$SSn[1] / (anovaFearIma$ANOVA$SSd[1]+anovaFearIma$ANOVA$SSn[1]),
anovaFearIma$ANOVA$SSn[2] / (anovaFearIma$ANOVA$SSd[2]+anovaFearIma$ANOVA$SSn[2])
); print(anovaFearIma)
# bayesian ANOVA on fear ratings in imagery-based conditioning group
set.seed(rngSeed); anovaBFFearIma <- anovaBF(
formula = fear ~ CS + partInd,
data = dataFearLong[dataFearLong$usGroup == "ima" & dataFearLong$time == "Post",],
whichRandom = "partInd",
iterations = 100000
); print(anovaBFFearIma)
# frequentist & bayesian t-tests on fear ratings in imagery-based conditioning group
# CS+av vs CS+neu
fearImaAvNeu_t <- t.test(x = dataFear$Av_Post[dataFear$usGroup == "ima"],
y = dataFear$Neu_Post[dataFear$usGroup == "ima"],
alternative = "greater", paired = TRUE) # one-sided
fearImaAvNeu_d <- cohens_d(x = dataFear$Av_Post[dataFear$usGroup == "ima"],
y = dataFear$Neu_Post[dataFear$usGroup == "ima"],
paired = TRUE)
fearImaAvNeu_BF <- ttestBF(x = dataFear$Av_Post[dataFear$usGroup == "ima"],
y = dataFear$Neu_Post[dataFear$usGroup == "ima"],
nullInterval = c(0, Inf), paired = TRUE) # one-sided x > y
# CS+av vs CS-
fearImaAvMin_t <- t.test(x = dataFear$Av_Post[dataFear$usGroup == "ima"],
y = dataFear$Min_Post[dataFear$usGroup == "ima"],
alternative = "greater", paired = TRUE) # one-sided
fearImaAvMin_d <- cohens_d(x = dataFear$Av_Post[dataFear$usGroup == "ima"],
y = dataFear$Min_Post[dataFear$usGroup == "ima"],
paired = TRUE)
fearImaAvMin_BF <- ttestBF(x = dataFear$Av_Post[dataFear$usGroup == "ima"],
y = dataFear$Min_Post[dataFear$usGroup == "ima"],
nullInterval = c(0, Inf), paired = TRUE) # one-sided x > y
# CS+neu vs CS-
fearImaNeuMin_t <- t.test(x = dataFear$Neu_Post[dataFear$usGroup == "ima"],
y = dataFear$Min_Post[dataFear$usGroup == "ima"],
alternative = "two.sided", paired = TRUE) # two-sided
fearImaNeuMin_d <- cohens_d(x = dataFear$Neu_Post[dataFear$usGroup == "ima"],
y = dataFear$Min_Post[dataFear$usGroup == "ima"],
paired = TRUE)
fearImaNeuMin_BF <- ttestBF(x = dataFear$Neu_Post[dataFear$usGroup == "ima"],
y = dataFear$Min_Post[dataFear$usGroup == "ima"],
nullIntervall = NULL, paired = TRUE) # two-sided
# descriptive statistics for fear ratings in classical conditioning group
describe(dataFear[dataFear$usGroup == "real",])
# frequentist ANOVA in classical conditioning group, including p. eta^2
# IV = CS; DV = fear rating
anovaFearReal <- ezANOVA(
data = dataFearLong[dataFearLong$usGroup == "real" & dataFearLong$time == "Post",],
dv = fear,
wid = partInd,
within = .(CS),
type = 3,
detailed = TRUE
); anovaFearReal$ANOVA$pEtaSq <-
c(anovaFearReal$ANOVA$SSn[1] / (anovaFearReal$ANOVA$SSd[1]+anovaFearReal$ANOVA$SSn[1]),
anovaFearReal$ANOVA$SSn[2] / (anovaFearReal$ANOVA$SSd[2]+anovaFearReal$ANOVA$SSn[2])
); print(anovaFearReal)
# bayesian ANOVA on fear ratings in classical conditioning group
set.seed(rngSeed); anovaBFFearReal <- anovaBF(
formula = fear ~ CS + partInd,
data = dataFearLong[dataFearLong$usGroup == "real" & dataFearLong$time == "Post",],
whichRandom = "partInd",
iterations = 100000
); print(anovaBFFearReal)
# frequentist & bayesian t-tests on fear ratings in classical conditioning group
# CS+av vs CS+neu
fearRealAvNeu_t <- t.test(x = dataFear$Av_Post[dataFear$usGroup == "real"],
y = dataFear$Neu_Post[dataFear$usGroup == "real"],
alternative = "greater", paired = TRUE) # one-sided
fearRealAvNeu_d <- cohens_d(x = dataFear$Av_Post[dataFear$usGroup == "real"],
y = dataFear$Neu_Post[dataFear$usGroup == "real"],
paired = TRUE)
fearRealAvNeu_BF <- ttestBF(x = dataFear$Av_Post[dataFear$usGroup == "real"],
y = dataFear$Neu_Post[dataFear$usGroup == "real"],
nullInterval = c(0, Inf), paired = TRUE) # one-sided x > y
# CS+av vs CS-
fearRealAvMin_t <- t.test(x = dataFear$Av_Post[dataFear$usGroup == "real"],
y = dataFear$Min_Post[dataFear$usGroup == "real"],
alternative = "greater", paired = TRUE) # one-sided
fearRealAvMin_d <- cohens_d(x = dataFear$Av_Post[dataFear$usGroup == "real"],
y = dataFear$Min_Post[dataFear$usGroup == "real"],
paired = TRUE)
fearRealAvMin_BF <- ttestBF(x = dataFear$Av_Post[dataFear$usGroup == "real"],
y = dataFear$Min_Post[dataFear$usGroup == "real"],
nullInterval = c(0, Inf), paired = TRUE) # one-sided x > y
# CS+neu vs CS-
fearRealNeuMin_t <- t.test(x = dataFear$Neu_Post[dataFear$usGroup == "real"],
y = dataFear$Min_Post[dataFear$usGroup == "real"],
alternative = "two.sided", paired = TRUE) # two-sided
fearRealNeuMin_d <- cohens_d(x = dataFear$Neu_Post[dataFear$usGroup == "real"],
y = dataFear$Min_Post[dataFear$usGroup == "real"],
paired = TRUE)
fearRealNeuMin_BF <- ttestBF(x = dataFear$Neu_Post[dataFear$usGroup == "real"],
y = dataFear$Min_Post[dataFear$usGroup == "real"],
nullIntervall = NULL, paired = TRUE) # two-sided
# descriptive statistics  for fear ratings across conditioning groups
describe(dataFear)
# frequentist ANOVA on fear ratings across conditioning groups
anovaFear <- ezANOVA(
data = dataFearLong[dataFearLong$time == "Post",],
dv = fear,
wid = partInd,
within = .(CS),
between = .(usGroup),
type = 3,
detailed = TRUE
); anovaFear$ANOVA$pEtaSq <- c(anovaFear$ANOVA$SSn[1] /
(anovaFear$ANOVA$SSd[1]+anovaFear$ANOVA$SSn[1]),
anovaFear$ANOVA$SSn[2] /
(anovaFear$ANOVA$SSd[2]+anovaFear$ANOVA$SSn[2]),
anovaFear$ANOVA$SSn[3] /
(anovaFear$ANOVA$SSd[3]+anovaFear$ANOVA$SSn[3]),
anovaFear$ANOVA$SSn[4] /
(anovaFear$ANOVA$SSd[4]+anovaFear$ANOVA$SSn[4])
); print(anovaFear)
# bayesian ANOVA on fear ratings across conditioning groups
set.seed(rngSeed); anovaBFFear <- anovaBF(
formula = fear ~ usGroup*CS + partInd,
data = dataFearLong[dataFearLong$time == "Post",],
whichRandom = "partInd",
whichModels = "all",
iterations = 100000
); print(anovaBFFear)
# inclusion factors for bayesian ANOVA effects
bf_nullModel <- 1
bf_usGroup <- exp(anovaBFFear@bayesFactor$bf[1])
bf_cs <- exp(anovaBFFear@bayesFactor$bf[2])
bf_interact <- exp(anovaBFFear@bayesFactor$bf[3])
bf_usGroup_cs <- exp(anovaBFFear@bayesFactor$bf[4])
bf_usGroup_interact <- exp(anovaBFFear@bayesFactor$bf[5])
bf_cs_interact <- exp(anovaBFFear@bayesFactor$bf[6])
bf_fullModel <- exp(anovaBFFear@bayesFactor$bf[7])
# main effect US group: models [1] and [3] vs. null model and model [2]
bfIncGroupFear <- (bf_usGroup + bf_usGroup_cs + bf_usGroup_interact + bf_fullModel) /
(bf_nullModel + bf_cs + bf_interact + bf_cs_interact); bfIncGroupFear
# main effect CS type: models "main effect CS" & "main effects CS & group" vs.
#                      null model and "main effect group"
bfIncCsFear <- (bf_cs + bf_usGroup_cs + bf_cs_interact + bf_fullModel) /
(bf_nullModel + bf_usGroup + bf_interact + bf_usGroup_interact); bfIncCsFear
# interaction: Full model vs. main-effects-only model
bfIncInteractFear <- (bf_interact + bf_usGroup_interact + bf_cs_interact + bf_fullModel) /
(bf_nullModel + bf_usGroup + bf_cs + bf_usGroup_cs); bfIncInteractFear
# quick graph of group x CS ANOVA on fear ratings
ezPlot(
data = dataFearLong[dataFearLong$time == "Post",],
dv = fear,
wid = partInd,
within = .(CS),
between = .(usGroup),
x = CS,
split = usGroup
)
# frequentist & bayesian t-tests on fear ratings (difference scores) across groups
# delta [CS+av - CS+neu]
fearBothAvNeu_t <- t.test(x = dataFear$Av_Post[dataFear$usGroup == "real"] -
dataFear$Neu_Post[dataFear$usGroup == "real"],
y = dataFear$Av_Post[dataFear$usGroup == "ima"] -
dataFear$Neu_Post[dataFear$usGroup == "ima"],
alternative = "two.sided", paired = FALSE) # two-sided
fearBothAvNeu_d <- cohens_d(x = dataFear$Av_Post[dataFear$usGroup == "real"] -
dataFear$Neu_Post[dataFear$usGroup == "real"],
y = dataFear$Av_Post[dataFear$usGroup == "ima"] -
dataFear$Neu_Post[dataFear$usGroup == "ima"],
paired = FALSE)
fearBothAvNeu_BF <- ttestBF(x = dataFear$Av_Post[dataFear$usGroup == "real"] -
dataFear$Neu_Post[dataFear$usGroup == "real"],
y = dataFear$Av_Post[dataFear$usGroup == "ima"] -
dataFear$Neu_Post[dataFear$usGroup == "ima"],
nullInterval = NULL, paired = FALSE) # two-sided
# delta [CS+av - CS-]
fearBothAvMin_t <- t.test(x = dataFear$Av_Post[dataFear$usGroup == "real"] -
dataFear$Min_Post[dataFear$usGroup == "real"],
y = dataFear$Av_Post[dataFear$usGroup == "ima"] -
dataFear$Min_Post[dataFear$usGroup == "ima"],
alternative = "two.sided", paired = FALSE) # two-sided
fearBothAvMin_d <- cohens_d(x = dataFear$Av_Post[dataFear$usGroup == "real"] -
dataFear$Min_Post[dataFear$usGroup == "real"],
y = dataFear$Av_Post[dataFear$usGroup == "ima"] -
dataFear$Min_Post[dataFear$usGroup == "ima"],
paired = FALSE)
fearBothAvMin_BF <- ttestBF(x = dataFear$Av_Post[dataFear$usGroup == "real"] -
dataFear$Min_Post[dataFear$usGroup == "real"],
y = dataFear$Av_Post[dataFear$usGroup == "ima"] -
dataFear$Min_Post[dataFear$usGroup == "ima"],
nullInterval = NULL, paired = FALSE) # two-sided
# delta [CS+neu - CS-]
fearBothNeuMin_t <- t.test(x = dataFear$Neu_Post[dataFear$usGroup == "real"] -
dataFear$Min_Post[dataFear$usGroup == "real"],
y = dataFear$Neu_Post[dataFear$usGroup == "ima"] -
dataFear$Min_Post[dataFear$usGroup == "ima"],
alternative = "two.sided", paired = FALSE) # two-sided
fearBothNeuMin_d <- cohens_d(x = dataFear$Neu_Post[dataFear$usGroup == "real"] -
dataFear$Min_Post[dataFear$usGroup == "real"],
y = dataFear$Neu_Post[dataFear$usGroup == "ima"] -
dataFear$Min_Post[dataFear$usGroup == "ima"],
paired = FALSE)
fearBothNeuMin_BF <- ttestBF(x = dataFear$Neu_Post[dataFear$usGroup == "real"] -
dataFear$Min_Post[dataFear$usGroup == "real"],
y = dataFear$Neu_Post[dataFear$usGroup == "ima"] -
dataFear$Min_Post[dataFear$usGroup == "ima"],
nullInterval = NULL, paired = FALSE) # two-sided
tableData <- data.frame(
comparison = rep(c("imagery: CS+av vs CS+neu", "imagery: CS+av vs CS-", "imagery: CSneu vs CS-",
"classical: CS+av vs CS+neu", "classical: CS+av vs CS-", "classical: CSneu vs CS-",
"groups: delta CS+av / CS+neu", "groups: delta CS+av / CS-", "groups: delta CSneu / CS-"), 5),
t = c(fearImaAvNeu_t$statistic, fearImaAvMin_t$statistic, fearImaNeuMin_t$statistic,
fearRealAvNeu_t$statistic, fearRealAvMin_t$statistic, fearRealNeuMin_t$statistic,
fearBothAvNeu_t$statistic, fearBothAvMin_t$statistic, fearBothNeuMin_t$statistic),
df = c(fearImaAvNeu_t$parameter, fearImaAvMin_t$parameter, fearImaNeuMin_t$parameter,
fearRealAvNeu_t$parameter, fearRealAvMin_t$parameter, fearRealNeuMin_t$parameter,
fearBothAvNeu_t$parameter, fearBothAvMin_t$parameter, fearBothNeuMin_t$parameter),
p = c(fearImaAvNeu_t$p.value, fearImaAvMin_t$p.value, fearImaNeuMin_t$p.value,
fearRealAvNeu_t$p.value, fearRealAvMin_t$p.value, fearRealNeuMin_t$p.value,
fearBothAvNeu_t$p.value*3, fearBothAvMin_t$p.value*3, fearBothNeuMin_t$p.value*3),  # Bonferroni
d = c(fearImaAvNeu_d$Cohens_d, fearImaAvMin_d$Cohens_d, fearImaNeuMin_d$Cohens_d,
fearRealAvNeu_d$Cohens_d, fearRealAvMin_d$Cohens_d, fearRealNeuMin_d$Cohens_d,
fearBothAvNeu_d$Cohens_d, fearBothAvMin_d$Cohens_d, fearBothNeuMin_d$Cohens_d),
BF = c(exp(fearImaAvNeu_BF@bayesFactor[["bf"]][1]), exp(fearImaAvMin_BF@bayesFactor[["bf"]][1]), exp(fearImaNeuMin_BF@bayesFactor[["bf"]][1]),
exp(fearRealAvNeu_BF@bayesFactor[["bf"]][1]), exp(fearRealAvMin_BF@bayesFactor[["bf"]][1]), exp(fearRealNeuMin_BF@bayesFactor[["bf"]][1]),
exp(fearBothAvNeu_BF@bayesFactor[["bf"]][1]), exp(fearBothAvMin_BF@bayesFactor[["bf"]][1]), exp(fearBothNeuMin_BF@bayesFactor[["bf"]][1]))
)
# round the numbers
tableData$t <-round(tableData$t, 2)
tableData$df <-round(tableData$df, 0)
tableData$p[tableData$p < .001] <- 0
tableData$p[tableData$p > 1] <- 1
tableData$p <-round(tableData$p, 3)
tableData$p <- as.character(tableData$p)
tableData$p[tableData$p == "0"] <- "< .001"
tableData$p <- str_replace(tableData$p, "0\\.", "\\.")
tableData$d <-round(tableData$d, 2)
tableData$BF <- format(tableData$BF, digits = 2)
tableFear <- flextable(tableData[1:9,])
tableFear <- add_header_lines(tableFear, top = TRUE, values = "fear")
save_as_docx(tableFear, path = paste0(pathname, "/tables/tableFear_raw.docx"))
#############################
### Plot for fear ratings ###
#############################
# remove between-subject variance for plotting standard errors based on
# within-subject variance
dataFearWithin <- dataFear[,c("partInd","usGroup","Av_Post","Neu_Post","Min_Post")]
# remove each participant's average from each single value
dataFearWithin[,3:5] <- as.matrix(dataFearWithin[,3:5]) -
rowMeans(as.matrix(dataFearWithin[,3:5]))
# prepare data frame for bar plot with means from standard dataset and SE from
# dataset without between-subject variance
plotDataFear <- data.frame(
usGroup = factor(c(rep("Imagery-Based",3),rep("Classical",3)),
levels = c("Imagery-Based","Classical")),
CS = factor(c("CS+ av","CS+ neu","CS- ","CS+ av","CS+ neu","CS- "),
levels = c("CS+ av","CS+ neu","CS- ")),
mean = c(describe(dataFear[dataFear$usGroup == "ima", c(5,8,11)])$mean,
describe(dataFear[dataFear$usGroup == "real", c(5,8,11)])$mean),
se = c(describe(dataFearWithin[dataFearWithin$usGroup == "ima", 3:5])$se,
describe(dataFearWithin[dataFearWithin$usGroup == "real", 3:5])$se)
)
# some general settings
plotFS <- 9
showSig <- TRUE
csLabels = c(expression(paste("CS+"[av])), expression(paste("CS+"[neu])), "CS-",
expression(paste("CS+"[av])), expression(paste("CS+"[neu])), "CS-")
# bar graphs of group x CS effects on fear ratings
graphFear <- ggplot(data = plotDataFear, aes(x = usGroup, y = mean, fill = CS)) +
theme_classic() +
geom_col(aes(fill = CS), position = position_dodge(width = .9)) +
scale_fill_discrete(type = scico(n = 3, palette = "davos", begin = .1, end = .7)) +
geom_errorbar(aes(ymin = mean-se, ymax = mean+se, width = .1), position = position_dodge(width = .9)) +
scale_y_continuous(name = "Fear rating (1-5)", limits = c(0.5,5.2), oob = rescale_none, expand = c(0,0)) +
#labs(title = "Fear") +
geom_vline(xintercept = 0.41) +
geom_rect(aes(xmin = 0.4, xmax = 2.6, ymin = 0.45, ymax = 1), fill = "white") +
geom_hline(yintercept = 1) +
geom_text(aes(y = 0.8), label = csLabels, position = position_dodge(.9), colour = "black", size = plotFS/.pt) +
geom_text(aes(label = usGroup, y = 5), colour = "black", size = plotFS/.pt, fontface = "bold") +
theme(legend.position = "none",
plot.title = element_text(size = plotFS, color = "black", face = "bold", hjust = .5),
axis.line.x = element_blank(),
axis.title.x = element_blank(),
axis.text.x = element_blank(),
axis.ticks.x = element_blank(),
axis.line.y  = element_blank(),
axis.title.y = element_text(margin = margin(r = 5), size = plotFS),
axis.text.y = element_text(margin = margin(r = 5), size = plotFS, color = "black"),
axis.ticks.y = element_line(colour = "black"))
if (showSig == TRUE){
graphFear <- graphFear +
geom_segment(aes(x = 0.7, y = mean+se+.1, xend = 1.0, yend = mean+se+.1), data = plotDataFear[1,]) +
geom_text(aes(label = "***", x = 0.85, y = mean+se+.15), size = plotFS/2, data = plotDataFear[1,]) +
geom_segment(aes(x = 0.7, y = mean+se+.4, xend = 1.3, yend = mean+se+.4), data = plotDataFear[1,]) +
geom_text(aes(label = "**", x = 1.0, y = mean+se+.45), size = plotFS/2, data = plotDataFear[1,]) +
geom_segment(aes(x = 1.7, y = mean+se+.1, xend = 2.0, yend = mean+se+.1), data = plotDataFear[4,]) +
geom_text(aes(label = "***", x = 1.85, y = mean+se+.15), size = plotFS/2, data = plotDataFear[4,]) +
geom_segment(aes(x = 1.7, y = mean+se+.4, xend = 2.3, yend = mean+se+.4), data = plotDataFear[4,]) +
geom_text(aes(label = "***", x = 2.0, y = mean+se+.45), size = plotFS/2, data = plotDataFear[4,])
}
graphFear
# saving it
graphFear <- graphFear + theme(plot.title = element_blank(),
plot.margin = margin(0,0,0,0))
ggsave(filename = paste0(pathname, "/figures/Figure2_barplotFear.eps"),
plot = graphFear,
width = 100,
height = 70,
units = "mm",
dpi = 300
)
ggsave(filename = paste0(pathname, "/figures/Figure2_barplotFear.pdf"),
plot = graphFear,
width = 100,
height = 70,
units = "mm",
dpi = 300
)
# add margins to subplots
graphFear <- graphFear + theme(plot.title = element_blank(),
plot.margin = margin(5,5,5,5))
# saving it
ggsave(filename = paste0(pathname, "/figures/Figure2_barplotFear.eps"),
plot = graphFear,
width = 100,
height = 70,
units = "mm",
dpi = 300
)
ggsave(filename = paste0(pathname, "/figures/Figure2_barplotFear.pdf"),
plot = graphFear,
width = 100,
height = 70,
units = "mm",
dpi = 300
)
