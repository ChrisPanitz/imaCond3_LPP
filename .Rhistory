# quick graph of CS Type x time ANOVA for Theta at Fz in classical conditioning group
plotThetaReal <- ezPlot(
data = dataThetaLong[dataThetaLong$usGroup == "real",],
dv = theta,
wid = partInd,
within = .(CS,time),
x = time,
split = CS
) ; plotThetaReal
ggsave(plot = plotThetaReal, filename = paste0(pathname, "/supplement/05s_theta_timeFactor_real_plot.jpg"),
width = 10, height = 10, units = "cm")
# frequentist & bayesian t-tests on Theta at Fz in classical conditioning group
### 1stBl
# CS+av vs CS+neu
thetaRealAvNeu1stBl_t <- t.test(x = dataTheta$Av_1stBl[dataTheta$usGroup == "real"],
y = dataTheta$Neu_1stBl[dataTheta$usGroup == "real"],
alternative = "greater", paired = TRUE) # one-sided
thetaRealAvNeu1stBl_d <- cohens_d(x = dataTheta$Av_1stBl[dataTheta$usGroup == "real"],
y = dataTheta$Neu_1stBl[dataTheta$usGroup == "real"],
paired = TRUE)
thetaRealAvNeu1stBl_BF <- ttestBF(x = dataTheta$Av_1stBl[dataTheta$usGroup == "real"],
y = dataTheta$Neu_1stBl[dataTheta$usGroup == "real"],
nullInterval = c(0, Inf), paired = TRUE) # one-sided x > y
# CS+av vs CS-
thetaRealAvMin1stBl_t <- t.test(x = dataTheta$Av_1stBl[dataTheta$usGroup == "real"],
y = dataTheta$Min_1stBl[dataTheta$usGroup == "real"],
alternative = "greater", paired = TRUE) # one-sided
thetaRealAvMin1stBl_d <- cohens_d(x = dataTheta$Av_1stBl[dataTheta$usGroup == "real"],
y = dataTheta$Min_1stBl[dataTheta$usGroup == "real"],
paired = TRUE)
thetaRealAvMin1stBl_BF <- ttestBF(x = dataTheta$Av_1stBl[dataTheta$usGroup == "real"],
y = dataTheta$Min_1stBl[dataTheta$usGroup == "real"],
nullInterval = c(0, Inf), paired = TRUE) # one-sided x > y
# CS+neu vs CS-
thetaRealNeuMin1stBl_t <- t.test(x = dataTheta$Neu_1stBl[dataTheta$usGroup == "real"],
y = dataTheta$Min_1stBl[dataTheta$usGroup == "real"],
alternative = "two.sided", paired = TRUE) # two-sided
thetaRealNeuMin1stBl_d <- cohens_d(x = dataTheta$Neu_1stBl[dataTheta$usGroup == "real"],
y = dataTheta$Min_1stBl[dataTheta$usGroup == "real"],
paired = TRUE)
thetaRealNeuMin1stBl_BF <- ttestBF(x = dataTheta$Neu_1stBl[dataTheta$usGroup == "real"],
y = dataTheta$Min_1stBl[dataTheta$usGroup == "real"],
nullInterval = NULL, paired = TRUE) # two-sided
### 2ndBl
# CS+av vs CS+neu
thetaRealAvNeu2ndBl_t <- t.test(x = dataTheta$Av_2ndBl[dataTheta$usGroup == "real"],
y = dataTheta$Neu_2ndBl[dataTheta$usGroup == "real"],
alternative = "greater", paired = TRUE) # one-sided
thetaRealAvNeu2ndBl_d <- cohens_d(x = dataTheta$Av_2ndBl[dataTheta$usGroup == "real"],
y = dataTheta$Neu_2ndBl[dataTheta$usGroup == "real"],
paired = TRUE)
thetaRealAvNeu2ndBl_BF <- ttestBF(x = dataTheta$Av_2ndBl[dataTheta$usGroup == "real"],
y = dataTheta$Neu_2ndBl[dataTheta$usGroup == "real"],
nullInterval = c(0, Inf), paired = TRUE) # one-sided x > y
# CS+av vs CS-
thetaRealAvMin2ndBl_t <- t.test(x = dataTheta$Av_2ndBl[dataTheta$usGroup == "real"],
y = dataTheta$Min_2ndBl[dataTheta$usGroup == "real"],
alternative = "greater", paired = TRUE) # one-sided
thetaRealAvMin2ndBl_d <- cohens_d(x = dataTheta$Av_2ndBl[dataTheta$usGroup == "real"],
y = dataTheta$Min_2ndBl[dataTheta$usGroup == "real"],
paired = TRUE)
thetaRealAvMin2ndBl_BF <- ttestBF(x = dataTheta$Av_2ndBl[dataTheta$usGroup == "real"],
y = dataTheta$Min_2ndBl[dataTheta$usGroup == "real"],
nullInterval = c(0, Inf), paired = TRUE) # one-sided x > y
# CS+neu vs CS-
thetaRealNeuMin2ndBl_t <- t.test(x = dataTheta$Neu_2ndBl[dataTheta$usGroup == "real"],
y = dataTheta$Min_2ndBl[dataTheta$usGroup == "real"],
alternative = "two.sided", paired = TRUE) # two-sided
thetaRealNeuMin2ndBl_d <- cohens_d(x = dataTheta$Neu_2ndBl[dataTheta$usGroup == "real"],
y = dataTheta$Min_2ndBl[dataTheta$usGroup == "real"],
paired = TRUE)
thetaRealNeuMin2ndBl_BF <- ttestBF(x = dataTheta$Neu_2ndBl[dataTheta$usGroup == "real"],
y = dataTheta$Min_2ndBl[dataTheta$usGroup == "real"],
nullInterval = NULL, paired = TRUE) # two-sided
tableThetaReal <- data.frame(
time = c(rep("1stBl",3), rep("2ndBl",3)),
comparison = rep(c("CS+av vs CS+neu", "CS+av vs CS-", "CSneu vs CS-"), 2),
t = c(thetaRealAvNeu1stBl_t$statistic, thetaRealAvMin1stBl_t$statistic, thetaRealNeuMin1stBl_t$statistic,
thetaRealAvNeu2ndBl_t$statistic, thetaRealAvMin2ndBl_t$statistic, thetaRealNeuMin2ndBl_t$statistic),
df = c(thetaRealAvNeu1stBl_t$parameter, thetaRealAvMin1stBl_t$parameter, thetaRealNeuMin1stBl_t$parameter,
thetaRealAvNeu2ndBl_t$parameter, thetaRealAvMin2ndBl_t$parameter, thetaRealNeuMin2ndBl_t$parameter),
p = c(thetaRealAvNeu1stBl_t$p.value, thetaRealAvMin1stBl_t$p.value, thetaRealNeuMin1stBl_t$p.value,
thetaRealAvNeu2ndBl_t$p.value, thetaRealAvMin2ndBl_t$p.value, thetaRealNeuMin2ndBl_t$p.value),
d = c(thetaRealAvNeu1stBl_d$Cohens_d, thetaRealAvMin1stBl_d$Cohens_d, thetaRealNeuMin1stBl_d$Cohens_d,
thetaRealAvNeu2ndBl_d$Cohens_d, thetaRealAvMin2ndBl_d$Cohens_d, thetaRealNeuMin2ndBl_d$Cohens_d),
BF = c(exp(thetaRealAvNeu1stBl_BF@bayesFactor[["bf"]][1]), exp(thetaRealAvMin1stBl_BF@bayesFactor[["bf"]][1]), exp(thetaRealNeuMin1stBl_BF@bayesFactor[["bf"]][1]),
exp(thetaRealAvNeu2ndBl_BF@bayesFactor[["bf"]][1]), exp(thetaRealAvMin2ndBl_BF@bayesFactor[["bf"]][1]), exp(thetaRealNeuMin2ndBl_BF@bayesFactor[["bf"]][1])),
testDir = rep(c("one.sided","one.sided","two.sided"),2)
)
capture.output(tableThetaReal, file = paste0(pathname, "/supplement/05s_theta_timeFactor_real_tTable.doc"))
# --- author: Christian Panitz
# --- encoding: en_US.UTF-8
# --- R version: 4.3.1 (2023-06-16) -- "Beagle Scouts"
# --- RStudio version: 2023.06.0
# --- script version: Mar 2024
# --- content: Plotting topographies for frontomedial Theta (across CS and pairwise comparisons within experimental groups)
###################
### preparing R ###
###################
# loading required packages
library(tidyr) # ver. 1.3.0
library(ggplot2) # ver. 3.4.2
library(ggpubr) # ver. 0.6.0
library(here) # ver. 1.0.1
library(eegUtils) # ver. 0.7.0
########################
### data preparation ###
########################
# load rating data from text file
# (see realCond3_allratings_readme.txt for more details)
pathname <- here()
importRatings <- read.csv(paste0(pathname, "/experimentData/imaCond3_demographicsAndRatings.txt"), sep=",")
# load Theta data from text file
# (see imaCond3_theta_readme.txt for more details)
importTheta <- read.csv(paste0(pathname, "/experimentData/imaCond3_theta.txt"), sep = ",")
importTheta <- merge(importRatings[,c("partCode","group")], importTheta, by = "partCode")
importTheta <- importTheta[order(importTheta$partCode),]
importThetaLong <- pivot_longer(importTheta, cols = Fp1_acqTotal_csplusav:O2_acq2_csminus,
names_to = c("channel", "time", "CS"), names_sep = "_", values_to = "theta")
# select all mean theta across all trials
importThetaLong <- importThetaLong[importThetaLong$time == "acqTotal", c("partCode","group","channel","CS","theta")]
topoAvgAVima <- aggregate(theta ~ channel, data = importThetaLong[importThetaLong$group == "ima" & importThetaLong$CS == "csplusav", ], FUN = "mean")
topoAvgNEUima <- aggregate(theta ~ channel, data = importThetaLong[importThetaLong$group == "ima" & importThetaLong$CS == "csplusneu", ], FUN = "mean")
topoAvgMINima <- aggregate(theta ~ channel, data = importThetaLong[importThetaLong$group == "ima" & importThetaLong$CS == "csminus", ], FUN = "mean")
topoAvgAVreal <- aggregate(theta ~ channel, data = importThetaLong[importThetaLong$group == "real" & importThetaLong$CS == "csplusav", ], FUN = "mean")
topoAvgNEUreal <- aggregate(theta ~ channel, data = importThetaLong[importThetaLong$group == "real" & importThetaLong$CS == "csplusneu", ], FUN = "mean")
topoAvgMINreal <- aggregate(theta ~ channel, data = importThetaLong[importThetaLong$group == "real" & importThetaLong$CS == "csminus", ], FUN = "mean")
# Load channel locations and transform from 3D theta + radius into 2D x & y
# for plotting purposes
loadname <- paste0(pathname,"/channelLocations/chanLocs_biosemi64.txt")
chanLocs <- read.csv(loadname, sep = ";")
chanLocs$thetaRadian <- pi/180*chanLocs$theta
chanLocs$x <- chanLocs$radius*sin(chanLocs$thetaRadian)*200
chanLocs$y <- chanLocs$radius*cos(chanLocs$thetaRadian)*200
names(chanLocs) <- gsub("name","electrode",names(chanLocs))
# number of electrodes
nrChans = length(topoAvgAVima)
# Create data frame with factors lab, driving frequency & modulation function,
# electrode name, x & y coordinates for plot & theta power for different conditions
dfTopos <- data.frame(
electrode = topoAvgAVima$channel,
ima_allCS = rowMeans(cbind(topoAvgAVima$theta, topoAvgNEUima$theta, topoAvgMINima$theta)),
ima_DiffAvNeu = topoAvgAVima$theta - topoAvgNEUima$theta,
ima_DiffAvMin = topoAvgAVima$theta - topoAvgMINima$theta,
real_allCS = rowMeans(cbind(topoAvgAVreal$theta, topoAvgNEUreal$theta, topoAvgMINreal$theta)),
real_DiffAvNeu = topoAvgAVreal$theta - topoAvgNEUreal$theta,
real_DiffAvMin = topoAvgAVreal$theta - topoAvgMINreal$theta
)
dfTopos <- merge(chanLocs, dfTopos, by = "electrode")
# settings for topography plots
topoRes <- 200
chanCol <- "black"
nrColors <- 8
minLimAll <- min(c(dfTopos$ima_allCS, dfTopos$real_allCS))
maxLimAll <- max(c(dfTopos$ima_allCS, dfTopos$real_allCS))
minLimDiff <- min(c(dfTopos$ima_DiffAvNeu, dfTopos$ima_DiffAvMin, dfTopos$real_DiffAvNeu, dfTopos$real_DiffAvMin))
maxLimDiff <- max(c(dfTopos$ima_DiffAvNeu, dfTopos$ima_DiffAvMin, dfTopos$real_DiffAvNeu, dfTopos$real_DiffAvMin))
absLimDiff <- max(abs(c(minLimDiff, maxLimDiff)))
### create topography plots
topoAllIma <- topoplot(data = dfTopos,
contour = FALSE, interp_limit = "head", highlights = "Fz",
grid_res = topoRes, quantity = "ima_allCS",
limits = c(-maxLimAll, maxLimAll), method = "gam")
topoAllIma$guides$fill$title <- "Power Density (µV^2/Hz)"
topoAllIma$guides$fill$barheight <- unit(9, "lines")
topoAllReal <- topoplot(data = dfTopos,
contour = FALSE, interp_limit = "head", highlights = "Fz",
grid_res = topoRes, quantity = "real_allCS",
limits = c(-maxLimAll, maxLimAll), method = "gam")
topoAllReal$guides$fill$title <- "Power Density (µV^2/Hz)"
topoAllReal$guides$fill$barheight <- unit(9, "lines")
topoAllImaAvNeu <- topoplot(data = dfTopos,
contour = FALSE, interp_limit = "head", highlights = "Fz",
grid_res = topoRes, quantity = "ima_DiffAvNeu",
limits = c(-absLimDiff, absLimDiff), method = "gam")
topoAllImaAvNeu$guides$fill$title <- "Diff. in Power Density (µV^2/Hz)"
topoAllImaAvNeu$guides$fill$barheight <- unit(12, "lines")
topoAllImaAvMin <- topoplot(data = dfTopos,
contour = FALSE, interp_limit = "head", highlights = "Fz",
grid_res = topoRes, quantity = "ima_DiffAvMin",
limits = c(-absLimDiff, absLimDiff), method = "gam")
topoAllImaAvMin$guides$fill$title <- "Diff. in Power Density (µV^2/Hz)"
topoAllImaAvMin$guides$fill$barheight <- unit(12, "lines")
topoAllRealAvNeu <- topoplot(data = dfTopos,
contour = FALSE, interp_limit = "head", highlights = "Fz",
grid_res = topoRes, quantity = "real_DiffAvNeu",
limits = c(-absLimDiff, absLimDiff), method = "gam")
topoAllRealAvNeu$guides$fill$title <- "Diff. in Power Density (µV^2/Hz)"
topoAllRealAvNeu$guides$fill$barheight <- unit(12, "lines")
topoAllRealAvMin <- topoplot(data = dfTopos,
contour = FALSE, interp_limit = "head", highlights = "Fz",
grid_res = topoRes, quantity = "real_DiffAvMin",
limits = c(-absLimDiff, absLimDiff), method = "gam")
topoAllRealAvMin$guides$fill$title <- "Diff. in Power Density (µV^2/Hz)"
topoAllRealAvMin$guides$fill$barheight <- unit(12, "lines")
# add margins
topoAllIma <- topoAllIma + theme(plot.margin = unit(c(5,5,5,5), "mm"))
topoAllReal <- topoAllReal + theme(plot.margin = unit(c(5,5,5,5), "mm"))
topoAllImaAvNeu <- topoAllImaAvNeu + theme(plot.margin = unit(c(5,5,5,5), "mm"))
topoAllImaAvMin <- topoAllImaAvMin + theme(plot.margin = unit(c(5,5,5,5), "mm"))
topoAllRealAvNeu <- topoAllRealAvNeu + theme(plot.margin = unit(c(5,5,5,5), "mm"))
topoAllRealAvMin <- topoAllRealAvMin + theme(plot.margin = unit(c(5,5,5,5), "mm"))
allTopos <- ggarrange(topoAllIma, topoAllImaAvNeu, topoAllImaAvMin,
topoAllReal, topoAllRealAvNeu, topoAllRealAvMin,
labels = c("Imagery-based: Average across all CS",
"   Imagery-based: CS+av vs CS+neu   ",
"    Imagery-based: CS+av vs CS-     ",
"  Classical: Average across all CS  ",
"     Classical: CS+av vs CS+neu     ",
"      Classical: CS+av vs CS-       "),
hjust = -0.2, nrow = 2, ncol = 3)
allTopos
# save it
ggsave(filename = paste0(pathname, "/supplement/05s_theta_topographies.pdf"),
plot = allTopos,
width = 400,
height = 200,
units = "mm"
)
# --- author: Christian Panitz
# --- encoding: en_US.UTF-8
# --- R version: 4.3.1 (2023-06-16) -- "Beagle Scouts"
# --- RStudio version: 2023.06.0
# --- script version: Mar 2024
# --- content: Supplementary analyses on frontomedial Theta, parallel to main analyses (ANOVAs, pairwise comparisons, plotting)
###################
### preparing R ###
###################
# random number generator seed (necessary for Bayesian ANOVAs)
# created with [set.seed(NULL)] and [sample(2^31 - 1, 1)]
rngSeed <- 814677222
# loading required packages
library(tidyr) # ver. 1.3.0
library(psych) # ver. 2.3.9
library(effectsize) # ver. 0.8.6
library(ez) # ver. 4.4-0
library(BayesFactor) # ver. 0.9.12-4.5
library(bayestestR) # 0.13.1
library(stringr) # ver. 1.5.0
library(here) # ver. 1.0.1
library(ggplot2) # ver. 3.4.2
########################
### data preparation ###
########################
# load rating data from text file
pathname <- here()
importRatings <- read.csv(paste0(pathname, "/experimentData/imaCond3_demographicsAndRatings.txt"), sep=",")
# load Theta data from text file
# (see imaCond3_theta_readme.txt for more details)
importTheta <- read.csv(paste0(pathname, "/experimentData/imaCond3_theta.txt"), sep = ",")
importTheta <- merge(importRatings[,c("partCode","group")], importTheta, by = "partCode")
importTheta <- importTheta[order(importTheta$partCode),]
# create data frames in wide & long format for fear ratings
dataTheta <- data.frame(
partInd = factor(1:dim(importTheta)[1]),
usGroup = factor(importTheta$group, labels = c("ima", "real")),
Av_allTr = importTheta$Fz_acqTotal_csplusav,
Av_1stBl = importTheta$Fz_acq1_csplusav,
Av_2ndBl = importTheta$Fz_acq2_csplusav,
Neu_allTr = importTheta$Fz_acqTotal_csplusneu,
Neu_1stBl = importTheta$Fz_acq1_csplusneu,
Neu_2ndBl = importTheta$Fz_acq2_csplusneu,
Min_allTr = importTheta$Fz_acqTotal_csminus,
Min_1stBl = importTheta$Fz_acq1_csminus,
Min_2ndBl = importTheta$Fz_acq2_csminus
)
dataThetaLong <- gather(data = dataTheta, key = "cond", value = "theta",
Av_allTr:Min_2ndBl)
dataThetaLong <- separate(data = dataThetaLong, col = cond,
into = c("CS", "time"), sep = "_")
dataThetaLong$CS <- factor(dataThetaLong$CS)
##########################################
### Imagery-based conditioning - theta ###
##########################################
# descriptive statistics for theta at Fz in imagery-based conditioning group
describe(dataTheta[dataTheta$usGroup == "ima",])
# frequentist ANOVA in imagery-based conditioning group, including p. eta^2
# IV = CS; DV = theta at Fz
anovaThetaIma <- ezANOVA(
data = dataThetaLong[dataThetaLong$usGroup == "ima" & dataThetaLong$time == "allTr",],
dv = theta,
wid = partInd,
within = .(CS),
type = 3,
detailed = TRUE
); anovaThetaIma$ANOVA$pEtaSq <-
c(anovaThetaIma$ANOVA$SSn[1] / (anovaThetaIma$ANOVA$SSd[1]+anovaThetaIma$ANOVA$SSn[1]),
anovaThetaIma$ANOVA$SSn[2] / (anovaThetaIma$ANOVA$SSd[2]+anovaThetaIma$ANOVA$SSn[2])
); print(anovaThetaIma)
capture.output(print(anovaThetaIma), file = paste0(pathname, "/supplement/05s_theta_timeFactor_ima_anovaFreq.doc"))
# bayesian CS x Time ANOVA on theta in imagery-based conditioning group
set.seed(rngSeed); anovaBFThetaIma <- anovaBF(
formula = theta ~ CS + partInd,
data = dataThetaLong[dataThetaLong$usGroup == "ima" & dataThetaLong$time == "allTr",],
whichRandom = "partInd",
iterations = 100000
); print(anovaBFThetaIma)
capture.output(print(anovaBFThetaIma), file = paste0(pathname, "/supplement/05s_theta_ima_anovaBayes.doc"))
# frequentist & bayesian t-tests on Theta at Fz in imagery-based conditioning group
# CS+av vs CS+neu
thetaImaAvNeuallTr_t <- t.test(x = dataTheta$Av_allTr[dataTheta$usGroup == "ima"],
y = dataTheta$Neu_allTr[dataTheta$usGroup == "ima"],
alternative = "greater", paired = TRUE) # one-sided
thetaImaAvNeuallTr_d <- cohens_d(x = dataTheta$Av_allTr[dataTheta$usGroup == "ima"],
y = dataTheta$Neu_allTr[dataTheta$usGroup == "ima"],
paired = TRUE)
thetaImaAvNeuallTr_BF <- ttestBF(x = dataTheta$Av_allTr[dataTheta$usGroup == "ima"],
y = dataTheta$Neu_allTr[dataTheta$usGroup == "ima"],
nullInterval = c(0, Inf), paired = TRUE) # one-sided x > y
# CS+av vs CS-
thetaImaAvMinallTr_t <- t.test(x = dataTheta$Av_allTr[dataTheta$usGroup == "ima"],
y = dataTheta$Min_allTr[dataTheta$usGroup == "ima"],
alternative = "greater", paired = TRUE) # one-sided
thetaImaAvMinallTr_d <- cohens_d(x = dataTheta$Av_allTr[dataTheta$usGroup == "ima"],
y = dataTheta$Min_allTr[dataTheta$usGroup == "ima"],
paired = TRUE)
thetaImaAvMinallTr_BF <- ttestBF(x = dataTheta$Av_allTr[dataTheta$usGroup == "ima"],
y = dataTheta$Min_allTr[dataTheta$usGroup == "ima"],
nullInterval = c(0, Inf), paired = TRUE) # one-sided x > y
# CS+neu vs CS-
thetaImaNeuMinallTr_t <- t.test(x = dataTheta$Neu_allTr[dataTheta$usGroup == "ima"],
y = dataTheta$Min_allTr[dataTheta$usGroup == "ima"],
alternative = "two.sided", paired = TRUE) # two-sided
thetaImaNeuMinallTr_d <- cohens_d(x = dataTheta$Neu_allTr[dataTheta$usGroup == "ima"],
y = dataTheta$Min_allTr[dataTheta$usGroup == "ima"],
paired = TRUE)
thetaImaNeuMinallTr_BF <- ttestBF(x = dataTheta$Neu_allTr[dataTheta$usGroup == "ima"],
y = dataTheta$Min_allTr[dataTheta$usGroup == "ima"],
nullInterval = NULL, paired = TRUE) # two-sided
tableThetaIma <- data.frame(
comparison = c("CS+av vs CS+neu", "CS+av vs CS-", "CSneu vs CS-"),
t = c(thetaImaAvNeuallTr_t$statistic, thetaImaAvMinallTr_t$statistic, thetaImaNeuMinallTr_t$statistic),
df = c(thetaImaAvNeuallTr_t$parameter, thetaImaAvMinallTr_t$parameter, thetaImaNeuMinallTr_t$parameter),
p = c(thetaImaAvNeuallTr_t$p.value, thetaImaAvMinallTr_t$p.value, thetaImaNeuMinallTr_t$p.value),
d = c(thetaImaAvNeuallTr_d$Cohens_d, thetaImaAvMinallTr_d$Cohens_d, thetaImaNeuMinallTr_d$Cohens_d),
BF = c(exp(thetaImaAvNeuallTr_BF@bayesFactor[["bf"]][1]), exp(thetaImaAvMinallTr_BF@bayesFactor[["bf"]][1]), exp(thetaImaNeuMinallTr_BF@bayesFactor[["bf"]][1])),
testDir = c("one.sided","one.sided","two.sided")
)
capture.output(tableThetaIma, file = paste0(pathname, "/supplement/05s_theta_ima_tTable.doc"))
#######################################
### Classical conditioning - theta ###
#######################################
# descriptive statistics for theta at Fz in imagery-based conditioning group
describe(dataTheta[dataTheta$usGroup == "real",])
# frequentist ANOVA in classical conditioning group, including p. eta^2
# IV = CS; DV = theta at Fz
anovaThetaReal <- ezANOVA(
data = dataThetaLong[dataThetaLong$usGroup == "real" & dataThetaLong$time == "allTr",],
dv = theta,
wid = partInd,
within = .(CS),
type = 3,
detailed = TRUE
); anovaThetaReal$ANOVA$pEtaSq <-
c(anovaThetaReal$ANOVA$SSn[1] / (anovaThetaReal$ANOVA$SSd[1]+anovaThetaReal$ANOVA$SSn[1]),
anovaThetaReal$ANOVA$SSn[2] / (anovaThetaReal$ANOVA$SSd[2]+anovaThetaReal$ANOVA$SSn[2])
); print(anovaThetaReal)
capture.output(print(anovaThetaReal), file = paste0(pathname, "/supplement/05s_theta_timeFactor_real_anovaFreq.doc"))
# bayesian CS x Time ANOVA on theta in classical conditioning group
set.seed(rngSeed); anovaBFThetaReal <- anovaBF(
formula = theta ~ CS + partInd,
data = dataThetaLong[dataThetaLong$usGroup == "real" & dataThetaLong$time == "allTr",],
whichRandom = "partInd",
iterations = 100000
); print(anovaBFThetaReal)
capture.output(print(anovaBFThetaReal), file = paste0(pathname, "/supplement/05s_theta_real_anovaBayes.doc"))
# frequentist & bayesian t-tests on Theta at Fz in classical conditioning group
# CS+av vs CS+neu
thetaRealAvNeuallTr_t <- t.test(x = dataTheta$Av_allTr[dataTheta$usGroup == "real"],
y = dataTheta$Neu_allTr[dataTheta$usGroup == "real"],
alternative = "greater", paired = TRUE) # one-sided
thetaRealAvNeuallTr_d <- cohens_d(x = dataTheta$Av_allTr[dataTheta$usGroup == "real"],
y = dataTheta$Neu_allTr[dataTheta$usGroup == "real"],
paired = TRUE)
thetaRealAvNeuallTr_BF <- ttestBF(x = dataTheta$Av_allTr[dataTheta$usGroup == "real"],
y = dataTheta$Neu_allTr[dataTheta$usGroup == "real"],
nullInterval = c(0, Inf), paired = TRUE) # one-sided x > y
# CS+av vs CS-
thetaRealAvMinallTr_t <- t.test(x = dataTheta$Av_allTr[dataTheta$usGroup == "real"],
y = dataTheta$Min_allTr[dataTheta$usGroup == "real"],
alternative = "greater", paired = TRUE) # one-sided
thetaRealAvMinallTr_d <- cohens_d(x = dataTheta$Av_allTr[dataTheta$usGroup == "real"],
y = dataTheta$Min_allTr[dataTheta$usGroup == "real"],
paired = TRUE)
thetaRealAvMinallTr_BF <- ttestBF(x = dataTheta$Av_allTr[dataTheta$usGroup == "real"],
y = dataTheta$Min_allTr[dataTheta$usGroup == "real"],
nullInterval = c(0, Inf), paired = TRUE) # one-sided x > y
# CS+neu vs CS-
thetaRealNeuMinallTr_t <- t.test(x = dataTheta$Neu_allTr[dataTheta$usGroup == "real"],
y = dataTheta$Min_allTr[dataTheta$usGroup == "real"],
alternative = "two.sided", paired = TRUE) # two-sided
thetaRealNeuMinallTr_d <- cohens_d(x = dataTheta$Neu_allTr[dataTheta$usGroup == "real"],
y = dataTheta$Min_allTr[dataTheta$usGroup == "real"],
paired = TRUE)
thetaRealNeuMinallTr_BF <- ttestBF(x = dataTheta$Neu_allTr[dataTheta$usGroup == "real"],
y = dataTheta$Min_allTr[dataTheta$usGroup == "real"],
nullInterval = NULL, paired = TRUE) # two-sided
tableThetaReal <- data.frame(
comparison = c("CS+av vs CS+neu", "CS+av vs CS-", "CSneu vs CS-"),
t = c(thetaRealAvNeuallTr_t$statistic, thetaRealAvMinallTr_t$statistic, thetaRealNeuMinallTr_t$statistic),
df = c(thetaRealAvNeuallTr_t$parameter, thetaRealAvMinallTr_t$parameter, thetaRealNeuMinallTr_t$parameter),
p = c(thetaRealAvNeuallTr_t$p.value, thetaRealAvMinallTr_t$p.value, thetaRealNeuMinallTr_t$p.value),
d = c(thetaRealAvNeuallTr_d$Cohens_d, thetaRealAvMinallTr_d$Cohens_d, thetaRealNeuMinallTr_d$Cohens_d),
BF = c(exp(thetaRealAvNeuallTr_BF@bayesFactor[["bf"]][1]), exp(thetaRealAvMinallTr_BF@bayesFactor[["bf"]][1]), exp(thetaRealNeuMinallTr_BF@bayesFactor[["bf"]][1])),
testDir = c("one.sided","one.sided","two.sided")
)
capture.output(tableThetaReal, file = paste0(pathname, "/supplement/05s_theta_real_tTable.doc"))
###################################
### Across groups - theta at Fz ###
###################################
# descriptive statistics for Theta at Fz across conditioning groups
describe(dataTheta)
# frequentist CS x Time ANOVA on Theta at Fz across conditioning groups
anovaTheta <- ezANOVA(
data = dataThetaLong[dataThetaLong$time == "allTr",],
dv = theta,
wid = partInd,
within = .(CS),
between = .(usGroup),
type = 3,
detailed = TRUE
); anovaTheta$ANOVA$pEtaSq <- c(
anovaTheta$ANOVA$SSn[1] / (anovaTheta$ANOVA$SSd[1]+anovaTheta$ANOVA$SSn[1]),
anovaTheta$ANOVA$SSn[2] / (anovaTheta$ANOVA$SSd[2]+anovaTheta$ANOVA$SSn[2]),
anovaTheta$ANOVA$SSn[3] / (anovaTheta$ANOVA$SSd[3]+anovaTheta$ANOVA$SSn[3]),
anovaTheta$ANOVA$SSn[4] / (anovaTheta$ANOVA$SSd[4]+anovaTheta$ANOVA$SSn[4])
); print(anovaTheta)
capture.output(print(anovaTheta), file = paste0(pathname, "/supplement/05s_theta_acrossGroups_anovaFreq.doc"))
# bayesian ANOVA on Theta at Fz across conditioning groups
set.seed(rngSeed); anovaBFTheta <- anovaBF(
formula = theta ~ usGroup*CS + partInd,
data = dataThetaLong[dataThetaLong$time == "allTr",],
whichRandom = c("partInd"),
whichModels = "all",
iterations = 100000
); print(anovaBFTheta)
capture.output(print(anovaBFTheta), file = paste0(pathname, "/supplement/05s_theta_acrossGroups_anovaBayes.doc"))
# inclusion factors for bayesian ANOVA effects
bf_inclusion(anovaBFTheta)
capture.output(bf_inclusion(anovaBFTheta), file = paste0(pathname, "/supplement/05s_theta_acrossGroups_BFinclusion.doc"))
# quick graph of group x CS ANOVA on Theta at Fz
plotTheta <- ezPlot(
data = dataThetaLong[dataThetaLong$time == "allTr",],
dv = theta,
wid = partInd,
within = .(CS),
between = .(usGroup),
x = CS,
split = usGroup
); plotTheta
ggsave(plot = plotTheta, filename = paste0(pathname, "/supplement/05s_theta_acrossGroups_plot.jpg"),
width = 20, height = 10, units = "cm")
# frequentist & bayesian t-tests on Theta (difference scores) across groups
# delta [CS+av - CS+neu]
thetaBothAvNeuallTr_t <- t.test(x = dataTheta$Av_allTr[dataTheta$usGroup == "real"] -
dataTheta$Neu_allTr[dataTheta$usGroup == "real"],
y = dataTheta$Av_allTr[dataTheta$usGroup == "ima"] -
dataTheta$Neu_allTr[dataTheta$usGroup == "ima"],
alternative = "two.sided", paired = FALSE) # two-sided
thetaBothAvNeuallTr_d <- cohens_d(x = dataTheta$Av_allTr[dataTheta$usGroup == "real"] -
dataTheta$Neu_allTr[dataTheta$usGroup == "real"],
y = dataTheta$Av_allTr[dataTheta$usGroup == "ima"] -
dataTheta$Neu_allTr[dataTheta$usGroup == "ima"],
paired = FALSE)
thetaBothAvNeuallTr_BF <- ttestBF(x = dataTheta$Av_allTr[dataTheta$usGroup == "real"] -
dataTheta$Neu_allTr[dataTheta$usGroup == "real"],
y = dataTheta$Av_allTr[dataTheta$usGroup == "ima"] -
dataTheta$Neu_allTr[dataTheta$usGroup == "ima"],
nullInterval = NULL, paired = FALSE) # two-sided
# delta [CS+av - CS-]
thetaBothAvMinallTr_t <- t.test(x = dataTheta$Av_allTr[dataTheta$usGroup == "real"] -
dataTheta$Min_allTr[dataTheta$usGroup == "real"],
y = dataTheta$Av_allTr[dataTheta$usGroup == "ima"] -
dataTheta$Min_allTr[dataTheta$usGroup == "ima"],
alternative = "two.sided", paired = FALSE) # two-sided
thetaBothAvMinallTr_d <- cohens_d(x = dataTheta$Av_allTr[dataTheta$usGroup == "real"] -
dataTheta$Min_allTr[dataTheta$usGroup == "real"],
y = dataTheta$Av_allTr[dataTheta$usGroup == "ima"] -
dataTheta$Min_allTr[dataTheta$usGroup == "ima"],
paired = FALSE)
thetaBothAvMinallTr_BF <- ttestBF(x = dataTheta$Av_allTr[dataTheta$usGroup == "real"] -
dataTheta$Min_allTr[dataTheta$usGroup == "real"],
y = dataTheta$Av_allTr[dataTheta$usGroup == "ima"] -
dataTheta$Min_allTr[dataTheta$usGroup == "ima"],
nullInterval = NULL, paired = FALSE) # two-sided
# delta [CS+neu - CS-]
thetaBothNeuMinallTr_t <- t.test(x = dataTheta$Neu_allTr[dataTheta$usGroup == "real"] -
dataTheta$Min_allTr[dataTheta$usGroup == "real"],
y = dataTheta$Neu_allTr[dataTheta$usGroup == "ima"] -
dataTheta$Min_allTr[dataTheta$usGroup == "ima"],
alternative = "two.sided", paired = FALSE) # two-sided
thetaBothNeuMinallTr_d <- cohens_d(x = dataTheta$Neu_allTr[dataTheta$usGroup == "real"] -
dataTheta$Min_allTr[dataTheta$usGroup == "real"],
y = dataTheta$Neu_allTr[dataTheta$usGroup == "ima"] -
dataTheta$Min_allTr[dataTheta$usGroup == "ima"],
paired = FALSE)
thetaBothNeuMinallTr_BF <- ttestBF(x = dataTheta$Neu_allTr[dataTheta$usGroup == "real"] -
dataTheta$Min_allTr[dataTheta$usGroup == "real"],
y = dataTheta$Neu_allTr[dataTheta$usGroup == "ima"] -
dataTheta$Min_allTr[dataTheta$usGroup == "ima"],
nullInterval = NULL, paired = FALSE) # two-sided
tableThetaBoth <- data.frame(
comparison = c("CS+av vs CS+neu", "CS+av vs CS-", "CSneu vs CS-"),
t = c(thetaBothAvNeuallTr_t$statistic, thetaBothAvMinallTr_t$statistic, thetaBothNeuMinallTr_t$statistic),
df = c(thetaBothAvNeuallTr_t$parameter, thetaBothAvMinallTr_t$parameter, thetaBothNeuMinallTr_t$parameter),
p = c(thetaBothAvNeuallTr_t$p.value*3, thetaBothAvMinallTr_t$p.value*3, thetaBothNeuMinallTr_t$p.value*3), # Bonferroni
d = c(thetaBothAvNeuallTr_d$Cohens_d, thetaBothAvMinallTr_d$Cohens_d, thetaBothNeuMinallTr_d$Cohens_d),
BF = c(exp(thetaBothAvNeuallTr_BF@bayesFactor[["bf"]][1]), exp(thetaBothAvMinallTr_BF@bayesFactor[["bf"]][1]), exp(thetaBothNeuMinallTr_BF@bayesFactor[["bf"]][1])),
testDir = rep("two.sided",3)
)
tableThetaBoth$p[tableThetaBoth$p > 1] <- 1
capture.output(tableThetaBoth, file = paste0(pathname, "/supplement/05s_theta_acrossGroups_tTable.doc"))
